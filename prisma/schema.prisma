// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int            @id @default(autoincrement())
  username     String         @unique
  hashword     String
  email        String         @unique
  decks        Deck[]
  deckLikes    DeckLikes[]
  comments     Comment[]
  commentLikes CommentLikes[]
}

model Deck {
  id          Int         @id @default(autoincrement())
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  name        String
  format      String
  wins        Int
  losses      Int
  buyLink     String?
  imgUrl      String?
  description String?
  mainBoard   Card[]
  likes       DeckLikes[]
  comments    Comment[]
  sideBoard   SideBoard?
}

model SideBoard {
  id     Int    @id @default(autoincrement())
  deckId Int    @unique
  deck   Deck   @relation(fields: [deckId], references: [id])
  cards  Card[]
}

model Comment {
  id       Int            @id @default(autoincrement())
  authorId Int
  author   User           @relation(fields: [authorId], references: [id])
  deckId   Int
  deck     Deck           @relation(fields: [deckId], references: [id])
  likedBy  CommentLikes[]
  content  String
  edited   Boolean        @default(false)
}

model DeckLikes {
  userId Int
  user   User @relation(fields: [userId], references: [id])
  deckId Int
  deck   Deck @relation(fields: [deckId], references: [id])

  @@id([userId, deckId])
}

model CommentLikes {
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id])

  @@id([userId, commentId])
}

model Set {
  id           Int     @id @default(autoincrement())
  name         String
  baseSetSize  Int
  totalSetSize Int
  code         String
  cards        Card[]
  isFoilOnly   Boolean
  isOnlineOnly Boolean
  releaseDate  String
  type         String
}

model Card {
  id            Int         @id @default(autoincrement())
  artist        String
  borderColor   String
  colorIdentity String
  colors        String
  cmc           Int
  flavorText    String?
  frameVersion  String
  hasFoil       Boolean
  hasNonFoil    Boolean
  inMainBoard   Deck[]
  inSideBoard   SideBoard[]
  keywords      Keyword[]
  layout        String
  manaCost      String?
  name          String
  power         String?
  rarity        String
  rulings       Ruling[]
  setId         Int
  set           Set         @relation(fields: [setId], references: [id])
  subtypes      SubType[]
  supertypes    SuperType[]
  text          String?
  toughness     String?
  type          String
  cardTypes     CardType[]
}

model Keyword {
  id    Int    @id @default(autoincrement())
  name  String
  cards Card[]
}

model CardType {
  id       Int       @id @default(autoincrement())
  name     String
  subtypes SubType[]
  cards    Card[]
}

model SubType {
  id       Int      @id @default(autoincrement())
  name     String
  cards    Card[]
  typeId   Int
  mainType CardType @relation(fields: [typeId], references: [id])
}

model SuperType {
  id    Int    @id @default(autoincrement())
  name  String
  cards Card[]
}

model Ruling {
  id     Int    @id @default(autoincrement())
  cardId Int
  card   Card   @relation(fields: [cardId], references: [id])
  text   String
  date   String
}

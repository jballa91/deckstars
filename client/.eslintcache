[{"/home/james/Desktop/deckstars/client/src/index.js":"1","/home/james/Desktop/deckstars/client/src/App.js":"2","/home/james/Desktop/deckstars/client/src/components/SplashPage.js":"3","/home/james/Desktop/deckstars/client/src/services/auth.js":"4","/home/james/Desktop/deckstars/client/src/MainContext.js":"5","/home/james/Desktop/deckstars/client/src/theme/mui_theme.js":"6","/home/james/Desktop/deckstars/client/src/styles/navbarstyles.js":"7","/home/james/Desktop/deckstars/client/src/components/nav/NavBar.js":"8","/home/james/Desktop/deckstars/client/src/components/nav/NavLogin.js":"9","/home/james/Desktop/deckstars/client/src/components/nav/NavMenu.js":"10","/home/james/Desktop/deckstars/client/src/components/SignUpForm.js":"11","/home/james/Desktop/deckstars/client/src/components/HomePage.js":"12","/home/james/Desktop/deckstars/client/src/components/PrivateRoute.js":"13","/home/james/Desktop/deckstars/client/src/styles/homepagestyles.js":"14","/home/james/Desktop/deckstars/client/src/styles/signupformstyles.js":"15","/home/james/Desktop/deckstars/client/src/styles/navmenustyles.js":"16","/home/james/Desktop/deckstars/client/src/components/DeckDetails.js":"17","/home/james/Desktop/deckstars/client/src/components/DeckInfo.js":"18","/home/james/Desktop/deckstars/client/src/components/homepage/HomePageLeft.js":"19","/home/james/Desktop/deckstars/client/src/components/homepage/DeckCards.js":"20","/home/james/Desktop/deckstars/client/src/components/MUI_custom/Custom_Accordion.js":"21","/home/james/Desktop/deckstars/client/src/components/homepage/CardBrowser.js":"22","/home/james/Desktop/deckstars/client/src/components/homepage/DeckForm.js":"23","/home/james/Desktop/deckstars/client/src/services/buttons.js":"24","/home/james/Desktop/deckstars/client/src/styles/deckformstyles.js":"25","/home/james/Desktop/deckstars/client/src/styles/homepageleftstyles.js":"26","/home/james/Desktop/deckstars/client/src/styles/deckcardstyles.js":"27","/home/james/Desktop/deckstars/client/src/components/homepage/CardFilter.js":"28","/home/james/Desktop/deckstars/client/src/components/MUI_custom/Filters_Custom_Accordion.js":"29","/home/james/Desktop/deckstars/client/src/styles/cardbrowserstyles.js":"30","/home/james/Desktop/deckstars/client/src/components/deckcards/CustomDetails.js":"31","/home/james/Desktop/deckstars/client/src/components/homepage/DeckBrowser.js":"32","/home/james/Desktop/deckstars/client/src/styles/deckbrowserstyles.js":"33","/home/james/Desktop/deckstars/client/src/styles/deckdetailstyles.js":"34","/home/james/Desktop/deckstars/client/src/components/homepage/DeckFilter.js":"35","/home/james/Desktop/deckstars/client/src/styles/deckfilterstyles.js":"36"},{"size":305,"mtime":1611868324515,"results":"37","hashOfConfig":"38"},{"size":1267,"mtime":1612636810854,"results":"39","hashOfConfig":"38"},{"size":192,"mtime":1612290856265,"results":"40","hashOfConfig":"38"},{"size":1230,"mtime":1612639400711,"results":"41","hashOfConfig":"38"},{"size":2364,"mtime":1612639400707,"results":"42","hashOfConfig":"38"},{"size":742,"mtime":1611800004853,"results":"43","hashOfConfig":"38"},{"size":1684,"mtime":1612138576137,"results":"44","hashOfConfig":"38"},{"size":1179,"mtime":1611869813027,"results":"45","hashOfConfig":"38"},{"size":3366,"mtime":1612284850478,"results":"46","hashOfConfig":"38"},{"size":1702,"mtime":1612639400711,"results":"47","hashOfConfig":"38"},{"size":2933,"mtime":1612482647978,"results":"48","hashOfConfig":"38"},{"size":3536,"mtime":1612636810854,"results":"49","hashOfConfig":"38"},{"size":578,"mtime":1611861912966,"results":"50","hashOfConfig":"38"},{"size":1410,"mtime":1612492537526,"results":"51","hashOfConfig":"38"},{"size":641,"mtime":1612138048774,"results":"52","hashOfConfig":"38"},{"size":143,"mtime":1612138601960,"results":"53","hashOfConfig":"38"},{"size":3069,"mtime":1612636810854,"results":"54","hashOfConfig":"38"},{"size":2790,"mtime":1612636810854,"results":"55","hashOfConfig":"38"},{"size":4872,"mtime":1612636810858,"results":"56","hashOfConfig":"38"},{"size":6169,"mtime":1612639400707,"results":"57","hashOfConfig":"38"},{"size":1297,"mtime":1612299831470,"results":"58","hashOfConfig":"38"},{"size":6853,"mtime":1612636810858,"results":"59","hashOfConfig":"38"},{"size":11611,"mtime":1612636810858,"results":"60","hashOfConfig":"38"},{"size":1833,"mtime":1612636810858,"results":"61","hashOfConfig":"38"},{"size":2124,"mtime":1612636810858,"results":"62","hashOfConfig":"38"},{"size":1595,"mtime":1612289866230,"results":"63","hashOfConfig":"38"},{"size":2483,"mtime":1612636810858,"results":"64","hashOfConfig":"38"},{"size":8059,"mtime":1612636810858,"results":"65","hashOfConfig":"38"},{"size":1048,"mtime":1612299969961,"results":"66","hashOfConfig":"38"},{"size":2903,"mtime":1612636810858,"results":"67","hashOfConfig":"38"},{"size":13873,"mtime":1612636810858,"results":"68","hashOfConfig":"38"},{"size":3848,"mtime":1612636810858,"results":"69","hashOfConfig":"38"},{"size":1735,"mtime":1612636810858,"results":"70","hashOfConfig":"38"},{"size":562,"mtime":1612636810858,"results":"71","hashOfConfig":"38"},{"size":6598,"mtime":1612636810858,"results":"72","hashOfConfig":"38"},{"size":1708,"mtime":1612636810858,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"1p0v3vd",{"filePath":"77","messages":"78","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"76"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"76"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"76"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"76"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"76"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"76"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"76"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"76"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"76"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"76"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"76"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"76"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"76"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"76"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"/home/james/Desktop/deckstars/client/src/index.js",[],["161","162"],"/home/james/Desktop/deckstars/client/src/App.js",["163","164","165","166","167","168","169"],"import { createBrowserHistory } from \"history\";\nimport React, { useEffect, useContext } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { SplashPage } from \"./components/SplashPage.js\";\nimport { MainContext } from \"./MainContext\";\n\nimport PrivateRoute from \"./components/PrivateRoute\";\nimport NavBar from \"./components/nav/NavBar\";\nimport HomePage from \"./components/HomePage\";\n\nimport { Box, CircularProgress } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nconst history = createBrowserHistory();\n\nconst useStyles = makeStyles((theme) => ({\n  window: {\n    width: \"100vw\",\n\n    height: \"100%\",\n    margin: \"0px\",\n    padding: \"0px\",\n  },\n  app: {},\n  slipbop: {\n    position: \"static\",\n    zIndex: 3,\n    width: \"100%\",\n  },\n}));\n\nfunction App() {\n  const { authenticated } = useContext(MainContext);\n  const { loading } = useContext(MainContext);\n\n  const styles = useStyles();\n\n  // useEffect(() => {}, [loading]);\n\n  return (\n    <Box className={styles.window}>\n      <BrowserRouter history={history}>\n        <header className={styles.slipbop}>\n          <NavBar />\n        </header>\n        <Route path=\"/\" component={HomePage} />\n      </BrowserRouter>\n    </Box>\n  );\n}\n\nexport default App;\n","/home/james/Desktop/deckstars/client/src/components/SplashPage.js",[],"/home/james/Desktop/deckstars/client/src/services/auth.js",[],"/home/james/Desktop/deckstars/client/src/MainContext.js",[],"/home/james/Desktop/deckstars/client/src/theme/mui_theme.js",[],"/home/james/Desktop/deckstars/client/src/styles/navbarstyles.js",[],"/home/james/Desktop/deckstars/client/src/components/nav/NavBar.js",[],"/home/james/Desktop/deckstars/client/src/components/nav/NavLogin.js",[],"/home/james/Desktop/deckstars/client/src/components/nav/NavMenu.js",["170"],"import React, { useState, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Box, Menu, MenuItem, IconButton, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport navmenustyles from \"../../styles/navmenustyles\";\nimport { MainContext } from \"../../MainContext\";\nimport { logout } from \"../../services/auth\";\n\nconst useStyles = makeStyles((theme) => navmenustyles);\n\nconst NavMenu = () => {\n  const { user, setAuthenticated, setCurrentDeck, setUser } = useContext(\n    MainContext\n  );\n  const [anchorEl, setAnchorEl] = useState(null);\n  const styles = useStyles();\n  const handleClick = (e) => {\n    e.preventDefault();\n    setAnchorEl(e.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleLogout = (e) => {\n    e.preventDefault();\n    setAuthenticated(false);\n    logout();\n    // setCurrentDeck(null);\n    setUser(null);\n    handleClose();\n    // history.push(\"/\");\n  };\n\n  return (\n    <Box className={styles.navmenu}>\n      <Box>\n        <Typography>Welcome, {user.username}.</Typography>\n      </Box>\n      <IconButton\n        aria-controls=\"menu\"\n        component=\"span\"\n        aria-haspopup=\"true\"\n        onClick={handleClick}\n        style={{ marginLeft: \"10px\", marginRight: \"10px\" }}\n      >\n        <MenuIcon fontSize=\"default\" />\n      </IconButton>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <MenuItem onClick={handleLogout}>Logout</MenuItem>\n      </Menu>\n    </Box>\n  );\n};\nexport default NavMenu;\n","/home/james/Desktop/deckstars/client/src/components/SignUpForm.js",["171"],"import React, { useEffect, useState, useContext } from \"react\";\nimport { Box, Typography, Button, TextField } from \"@material-ui/core\";\nimport { MainContext } from \"../MainContext\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport signupformstyles from \"../styles/signupformstyles\";\n\nimport { signUp } from \"../services/auth\";\n\nconst useStyles = makeStyles((theme) => signupformstyles);\n\nconst SignUpForm = ({ setSignUpOpen }) => {\n  const { setAuthenticated, setLoading, setUser } = useContext(MainContext);\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [checkPassword, setCheckPassword] = useState(\"\");\n\n  const styles = useStyles();\n\n  useEffect(() => {}, []);\n\n  const changeUsername = (e) => {\n    e.preventDefault();\n    setUsername(e.target.value);\n  };\n\n  const changeEmail = (e) => {\n    e.preventDefault();\n    setEmail(e.target.value);\n  };\n\n  const changePassword = (e) => {\n    e.preventDefault();\n    setPassword(e.target.value);\n  };\n\n  const changeCheckPassword = (e) => {\n    e.preventDefault();\n    setCheckPassword(e.target.value);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (password === checkPassword) {\n      let user = await signUp(username, email, password);\n      if (user.message === \"Username or Email in use.\") {\n        window.alert(\"Username or Email in use.\");\n      } else {\n        setUser(user.user);\n        setAuthenticated(true);\n      }\n    } else {\n      window.alert(\"Passwords do not match\");\n    }\n  };\n\n  return (\n    <Box className={styles.form_container}>\n      <Typography variant=\"h2\" className={styles.form_title}>\n        Sign Up\n      </Typography>\n      <form className={styles.form} onSubmit={handleSubmit}>\n        <TextField\n          required\n          className={styles.form_field}\n          InputProps={{ className: styles.input }}\n          onChange={changeUsername}\n          placeholder=\"username\"\n          type=\"text\"\n          autoFocus={true}\n        ></TextField>\n        <TextField\n          required\n          className={styles.form_field}\n          InputProps={{ className: styles.input }}\n          onChange={changeEmail}\n          placeholder=\"email\"\n          type=\"text\"\n        ></TextField>\n        <TextField\n          required\n          className={styles.form_field}\n          InputProps={{ className: styles.input }}\n          onChange={changePassword}\n          placeholder=\"password\"\n          type=\"password\"\n        ></TextField>\n        <TextField\n          required\n          className={styles.form_field}\n          InputProps={{ className: styles.input }}\n          onChange={changeCheckPassword}\n          placeholder=\"confirm password\"\n          type=\"password\"\n        ></TextField>\n        <Button type=\"submit\">Sign up for an account</Button>\n      </form>\n    </Box>\n  );\n};\n\nexport default SignUpForm;\n","/home/james/Desktop/deckstars/client/src/components/HomePage.js",["172","173","174","175"],"import React, { useEffect, useContext } from \"react\";\nimport { Route, Switch, useLocation, useParams } from \"react-router-dom\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport HomePageLeft from \"./homepage/HomePageLeft\";\nimport DeckDetails from \"./DeckDetails\";\nimport DeckCards from \"./homepage/DeckCards\";\nimport CardBrowser from \"./homepage/CardBrowser\";\nimport DeckBrowser from \"./homepage/DeckBrowser\";\nimport DeckForm from \"./homepage/DeckForm\";\nimport CardFilter from \"./homepage/CardFilter\";\nimport DeckFilter from \"./homepage/DeckFilter\";\nimport { MainContext } from \"../MainContext\";\nimport { Box, Modal, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\n\nimport homepagestyles from \"../styles/homepagestyles\";\n\nconst useStyles = makeStyles((theme) => homepagestyles);\n\nconst HomePage = () => {\n  const {\n    modalImgOpen,\n    modalImgSrc,\n    modalRulingsOpen,\n    rulings,\n    setModalImgOpen,\n    setModalImgSrc,\n    setModalRulingsOpen,\n    setRulings,\n  } = useContext(MainContext);\n  const styles = useStyles();\n\n  const handleImgClose = (e) => {\n    e.preventDefault();\n    setModalImgOpen(false);\n    setModalImgSrc([]);\n  };\n\n  const handleRulingsClose = (e) => {\n    e.preventDefault();\n    setModalRulingsOpen(false);\n    setRulings([]);\n  };\n\n  // useEffect(() => {}, []);\n\n  return (\n    <div className={styles.homepage_container}>\n      <Modal\n        open={modalImgOpen}\n        onClose={handleImgClose}\n        className={styles.modal}\n        aria-labelledby=\"Card Image\"\n        aria-describedby=\"This is an image of a selected card.\"\n      >\n        <Box className={styles.modal}>\n          {modalImgSrc.map((src, i) => {\n            return (\n              <img\n                className={styles.modal_img}\n                alt=\"A large version of selected card\"\n                src={src}\n                key={i}\n              ></img>\n            );\n          })}\n        </Box>\n      </Modal>\n      <Modal\n        open={modalRulingsOpen}\n        onClose={handleRulingsClose}\n        className={styles.modal_ruling}\n        aria-labelledby=\"Rulings\"\n        aria-describedby=\"This is a set of rulings for a card.\"\n      >\n        <Box className={styles.modal_ruling_box}>\n          {rulings.map((ruling, i) => {\n            return (\n              <Box className={styles.ruling}>\n                <Typography variant=\"Body2\">{ruling.date}</Typography>\n                <Typography variant=\"caption\">{ruling.text}</Typography>\n              </Box>\n            );\n          })}\n        </Box>\n      </Modal>\n      <Box className={styles.homepage_top}>\n        <Switch>\n          <Route exact path=\"/decks\" component={DeckFilter} />\n          <Route exact path=\"/\" component={CardFilter} />\n        </Switch>\n      </Box>\n      <Box className={styles.homepage_bottom}>\n        <HomePageLeft className={styles.homepage_left} />\n        <Box className={styles.homepage_center}>\n          <Switch>\n            <Route exact path=\"/deck/:deckId\" component={DeckCards} />\n            <Route exact path=\"/decks\" component={DeckBrowser} />\n            <Route path=\"/\" component={CardBrowser} />\n          </Switch>\n        </Box>\n        <Box className={styles.homepage_right}>\n          <Switch>\n            <Route exact path=\"/deck/:deckId\" component={DeckDetails} />\n            <Route exact path=\"/decks\" component={DeckDetails} />\n            <Route path=\"/\" component={DeckForm} />\n          </Switch>\n        </Box>\n      </Box>\n    </div>\n  );\n};\n\nexport default HomePage;\n","/home/james/Desktop/deckstars/client/src/components/PrivateRoute.js",[],"/home/james/Desktop/deckstars/client/src/styles/homepagestyles.js",[],"/home/james/Desktop/deckstars/client/src/styles/signupformstyles.js",[],"/home/james/Desktop/deckstars/client/src/styles/navmenustyles.js",[],"/home/james/Desktop/deckstars/client/src/components/DeckDetails.js",["176","177"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Box, Typography, Button } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { MainContext } from \"../MainContext\";\n\nimport deckdetailstyles from \"../styles/deckdetailstyles\";\n\nconst useStyles = makeStyles((theme) => deckdetailstyles);\n\nconst DeckDetails = () => {\n  const { user, loading, currentDeck, setIsEdit, setNewDeck } = useContext(\n    MainContext\n  );\n  const history = useHistory();\n\n  const styles = useStyles();\n\n  const handleEdit = (e) => {\n    // e.preventDefault();\n    let tempDeck = {\n      id: currentDeck.id,\n      name: currentDeck.name,\n      description: currentDeck.description,\n      mainDeck: [\n        ...currentDeck.mainDeck.map((slot) => {\n          return {\n            id: slot.card.id,\n            quantity: slot.quantity,\n            name: slot.card.name,\n          };\n        }),\n      ],\n      sideBoard: [\n        ...currentDeck.sideBoard.map((slot) => {\n          return {\n            id: slot.card.id,\n            quantity: slot.quantity,\n            name: slot.card.name,\n          };\n        }),\n      ],\n    };\n    setNewDeck(tempDeck);\n    setIsEdit(true);\n    history.push(\"/\");\n  };\n\n  const handleVisit = (e) => {\n    history.push(`/deck/${currentDeck.id}`);\n  };\n\n  if (loading) {\n    return (\n      <Box\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          paddingTop: \"20px\",\n        }}\n      >\n        <h1 style={{ color: \"white\" }}>Loading...</h1>\n      </Box>\n    );\n  }\n\n  if (!currentDeck) {\n    return null;\n  }\n\n  return (\n    <Box className={styles.deck_details_container}>\n      <img\n        src={currentDeck.imgUrl}\n        alt=\"Deck\"\n        className={styles.deck_img}\n      ></img>\n      <Box className={styles.name_and_edit_button_container}>\n        <Typography variant=\"h5\">{currentDeck.name}</Typography>\n        {user && currentDeck.userId === user.id ? (\n          <Button className={styles.edit_button} onClick={(e) => handleEdit(e)}>\n            Edit\n          </Button>\n        ) : (\n          <Button\n            className={styles.edit_button}\n            onClick={(e) => handleVisit(e)}\n          >\n            View Deck\n          </Button>\n        )}\n      </Box>\n      <Typography variant=\"body2\">\n        Created By: {currentDeck.user.username}\n      </Typography>\n      <Typography variant=\"body2\">Format: {currentDeck.format}</Typography>\n      <Box className={styles.deck_record}>\n        <Typography variant=\"caption\">Wins: {currentDeck.wins}</Typography>\n        <Typography variant=\"caption\">Losses: {currentDeck.losses}</Typography>\n        <Typography variant=\"caption\">\n          Winrate:{\" \"}\n          {currentDeck.wins\n            ? currentDeck.wins / (currentDeck.wins + currentDeck.losses)\n            : 0}\n        </Typography>\n      </Box>\n      <Box>\n        <Typography variant=\"body1\">{currentDeck.description}</Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default DeckDetails;\n","/home/james/Desktop/deckstars/client/src/components/DeckInfo.js",["178","179","180","181"],"import React, { useContext } from \"react\";\nimport { Link, withRouter, useHistory } from \"react-router-dom\";\nimport { Box, Typography, IconButton } from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport { makeStyles } from \"@material-ui/styles\";\n\nimport { MainContext } from \"../MainContext\";\n\nconst useStyles = makeStyles((theme) => ({\n  link: {\n    textDecoration: \"none\",\n    color: \"white\",\n  },\n  deckinfo_container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    backgroundColor: theme.palette.secondary.light,\n    height: \"fit-content\",\n    maxWidth: \"100%\",\n    marginBottom: \"5px\",\n    padding: \"10px\",\n  },\n  row_one: {\n    display: \"grid\",\n    // justifyContent: \"space-between\",\n    gridTemplateColumns: \"2fr 1fr\",\n    alignItems: \"center\",\n    margin: \"5px\",\n  },\n  row_two: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    margin: \"5px\",\n  },\n}));\n\nconst DeckInfo = ({ deck, setDeleteOpen, setDeckToDelete }) => {\n  const { setCurrentDeck, setLoading, setFilters } = useContext(MainContext);\n  const styles = useStyles();\n  const handleClick = async (e) => {\n    // let foundDeck = await fetch(`/api/decks/${deck.id}`, {\n    //   headers: {\n    //     \"Content-Type\": \"application/json\",\n    //   },\n    // });\n    // const parsedDeck = await foundDeck.json();\n    // setFilters({\n    //   name: \"\",\n    //   colors: [],\n    //   cardTypes: [],\n    // });\n    // setCurrentDeck(parsedDeck);\n    setLoading(true);\n  };\n\n  const handleDelete = (e) => {\n    e.preventDefault();\n    setDeckToDelete(deck.id);\n    setDeleteOpen(true);\n  };\n\n  return (\n    <Link\n      to={`/deck/${deck.id}`}\n      key={deck.id}\n      className={styles.link}\n      onClick={(e) => handleClick(e)}\n    >\n      <Box className={styles.deckinfo_container}>\n        <Box className={styles.row_one}>\n          <Typography>{deck.name}</Typography>\n          <Typography variant=\"caption\">{deck.format}</Typography>\n        </Box>\n        <Box className={styles.row_two}>\n          <Typography variant=\"body2\">Wins: {deck.wins}</Typography>\n          <Typography variant=\"body2\">Losses: {deck.losses}</Typography>\n          <Typography variant=\"body2\">\n            Winrate: {deck.wins ? deck.wins / (deck.wins + deck.losses) : 0}\n          </Typography>\n        </Box>\n        <Box className={styles.delete_holder}>\n          <IconButton onClick={(e) => handleDelete(e)} size=\"small\">\n            <DeleteIcon color=\"error\" fontSize=\"small\" id={deck.id} />\n            <Typography variant=\"caption\" color=\"error\">\n              Delete Deck\n            </Typography>\n          </IconButton>\n        </Box>\n      </Box>\n    </Link>\n  );\n};\n\nexport default withRouter(DeckInfo);\n","/home/james/Desktop/deckstars/client/src/components/homepage/HomePageLeft.js",["182"],"import React, { useContext, useState, useEffect } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { MainContext } from \"../../MainContext\";\nimport {\n  Box,\n  Button,\n  Typography,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Modal,\n} from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport homepageleftstyles from \"../../styles/homepageleftstyles\";\nimport DeckInfo from \"../DeckInfo\";\n\nconst useStyles = makeStyles((theme) => homepageleftstyles);\n\nconst HomePageLeft = () => {\n  const { user, setIsEdit, setNewDeck, setUser } = useContext(MainContext);\n  const [deleteOpen, setDeleteOpen] = useState(false);\n  const [deckToDelete, setDeckToDelete] = useState(null);\n  const styles = useStyles();\n\n  const history = useHistory();\n\n  useEffect(() => {}, [user]);\n\n  const handleClose = (e) => {\n    setDeleteOpen(false);\n  };\n\n  const handleClick = (e) => {\n    e.preventDefault();\n    setDeleteOpen(false);\n  };\n\n  const handleCreateDeckClick = (e) => {\n    e.preventDefault();\n    setNewDeck({\n      name: \"\",\n      description: \"\",\n      mainDeck: [],\n      sideBoard: [],\n    });\n    setIsEdit(false);\n    history.push(\"/\");\n  };\n\n  const handleDeckBrowseClick = (e) => {\n    e.preventDefault();\n    history.push(\"/decks\");\n  };\n  const handleDeckDelete = async (e) => {\n    e.preventDefault();\n    await fetch(`/api/decks/${deckToDelete}`, {\n      method: \"DELETE\",\n      \"Content-Type\": \"application/json\",\n      credentials: \"include\",\n    });\n    // const parsed = await res.json();\n    const newDecks = user.decks.filter((deck) => deck.id !== deckToDelete);\n    const tempUser = { ...user };\n    tempUser.decks = newDecks;\n    setUser(tempUser);\n    setDeckToDelete(0);\n    setDeleteOpen(false);\n    setNewDeck({\n      name: \"\",\n      description: \"\",\n      mainDeck: [],\n      sideBoard: [],\n    });\n    history.push(\"/\");\n  };\n  return (\n    <Box className={styles.homepage_left}>\n      <Modal\n        open={deleteOpen}\n        onClose={handleClose}\n        className={styles.modal}\n        aria-labelledby=\"Delete Deck\"\n        aria-describedby=\"This is asking you if you're sure you want to delete a deck.\"\n      >\n        <Box className={styles.modal_box}>\n          <Typography>Are you sure you want to delete this deck?</Typography>\n          <Button\n            className={styles.confirm_delete}\n            onClick={(e) => handleDeckDelete(e)}\n          >\n            Confirm\n          </Button>\n          <Button\n            className={styles.cancel_delete}\n            onClick={(e) => handleClick(e)}\n          >\n            Cancel\n          </Button>\n        </Box>\n      </Modal>\n      <Box className={styles.fixed}>\n        {user && (\n          <>\n            <Accordion square={true} className={styles.accordion}>\n              <AccordionSummary\n                expandIcon={<ExpandMoreIcon color=\"primary\" />}\n                aria-controls=\"created decks\"\n              >\n                <Typography>Created Decks</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <Box className={styles.accordion_expanded}>\n                  {user &&\n                    user.decks.map((deck) => (\n                      <DeckInfo\n                        key={deck.id}\n                        deck={deck}\n                        setDeleteOpen={setDeleteOpen}\n                        setDeckToDelete={setDeckToDelete}\n                      />\n                    ))}\n                </Box>\n              </AccordionDetails>\n            </Accordion>\n            <Accordion square={true} className={styles.accordion}>\n              <AccordionSummary\n                expandIcon={<ExpandMoreIcon color=\"primary\" />}\n                aria-controls=\"liked decks\"\n              >\n                <Typography>Liked Decks</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <Box className={styles.accordion_expanded}>\n                  {user &&\n                    user.deckLikes.map((deck) => (\n                      <DeckInfo\n                        key={deck.id}\n                        deck={deck}\n                        setDeleteOpen={setDeleteOpen}\n                        setDeckToDelete={setDeckToDelete}\n                      />\n                    ))}\n                </Box>\n              </AccordionDetails>\n            </Accordion>\n          </>\n        )}\n        <Button\n          className={styles.button_new_deck}\n          onClick={(e) => handleCreateDeckClick(e)}\n        >\n          Create a new deck\n        </Button>\n        <Button\n          className={styles.button_new_deck}\n          onClick={(e) => handleDeckBrowseClick(e)}\n        >\n          Browse Decks\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default HomePageLeft;\n","/home/james/Desktop/deckstars/client/src/components/homepage/DeckCards.js",["183","184","185","186","187"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport deckcardstyles from \"../../styles/deckcardstyles\";\nimport {\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n} from \"../MUI_custom/Custom_Accordion\";\nimport { Box, Typography, LinearProgress } from \"@material-ui/core\";\nimport CustomDetails from \"../deckcards/CustomDetails\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { MainContext } from \"../../MainContext\";\nimport reactStringReplace from \"react-string-replace\";\n\nconst useStyles = makeStyles((theme) => deckcardstyles);\n\nconst DeckCards = () => {\n  const {\n    currentDeck,\n    symbols,\n    loading,\n    setCurrentDeck,\n    setLoading,\n    setModalImgSrc,\n    setModalImgOpen,\n  } = useContext(MainContext);\n  const { deckId } = useParams();\n  const [expanded, setExpanded] = useState(false);\n  // const [loading, setLoading] = useState(true);\n  const styles = useStyles();\n\n  const handleImgClick = (e) => {\n    if (e.target.getAttribute(\"layout\") === \"modal_dfc\") {\n      setModalImgSrc([e.target.src, e.target.getAttribute(\"backimg\")]);\n    } else {\n      setModalImgSrc([e.target.src]);\n    }\n    setModalImgOpen(true);\n  };\n\n  const findSymbols = (str) => {\n    const regex = /\\{(.*?)\\}/g;\n    return str.match(regex);\n  };\n\n  // found package for this replacing in rules text\n  // const fillSymbols = (str) => {\n  //   return `<img src=${symbols[str]} alt=\"card symbol\" className={styles.card_symbol_img}></img>`;\n  // };\n\n  const handleChange = (panel) => (event, newExpanded) => {\n    setExpanded(newExpanded ? panel : false);\n  };\n\n  useEffect(() => {\n    (async () => {\n      const res = await fetch(`/api/decks/${parseInt(deckId)}`);\n      const parsed = await res.json();\n      setCurrentDeck(parsed);\n      setLoading(false);\n    })();\n  }, [deckId, setCurrentDeck]);\n\n  if (loading) {\n    return (\n      <Box\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          paddingTop: \"20px\",\n        }}\n      >\n        <h1 style={{ color: \"white\" }}>Loading...</h1>\n      </Box>\n    );\n  }\n\n  if (!currentDeck) {\n    return <h1>NO CURRENT DECK</h1>;\n  }\n\n  return (\n    <Box className={styles.deck_cards}>\n      <Typography variant=\"h4\" className={styles.header}>\n        MainDeck\n      </Typography>\n      <Box className={styles.table_header}>\n        <Typography variant=\"body2\" className={styles.quantity_header}>\n          #\n        </Typography>\n        <Typography variant=\"body2\">Name</Typography>\n        <Typography variant=\"body2\">ManaCost</Typography>\n        <Typography variant=\"body2\">Type</Typography>\n      </Box>\n      {currentDeck.mainDeck.map((slot, i) => {\n        let { card } = slot;\n        return (\n          <Accordion\n            square\n            expanded={expanded === `panel${i + 1}`}\n            onChange={handleChange(`panel${i + 1}`)}\n            key={card.uuid}\n          >\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon color=\"primary\" />}\n              aria-controls={`panel${i + 1} content`}\n            >\n              <Box className={styles.summary}>\n                <Typography variant=\"body2\" className={styles.quant_info}>\n                  {slot.quantity}\n                </Typography>\n                <Typography variant=\"body2\">{card.name}</Typography>\n                <Box className={styles.mana_cost_symbols}>\n                  {card.manaCost &&\n                    findSymbols(card.manaCost).map((symbol, i) => {\n                      return (\n                        <img\n                          key={symbol + card.uuid + `${i}`}\n                          className={styles.card_symbol_img}\n                          alt=\"Card Symbol\"\n                          src={symbols[symbol]}\n                        ></img>\n                      );\n                    })}\n                </Box>\n                <Typography variant=\"body2\">{card.type}</Typography>\n              </Box>\n            </AccordionSummary>\n            <CustomDetails card={card} />\n          </Accordion>\n        );\n      })}\n      <Typography variant=\"h4\" className={styles.header}>\n        SideBoard\n      </Typography>\n      <Box className={styles.table_header}>\n        <Typography variant=\"body2\" className={styles.quantity_header}>\n          #\n        </Typography>\n        <Typography variant=\"body2\">Name</Typography>\n        <Typography variant=\"body2\">ManaCost</Typography>\n        <Typography variant=\"body2\">Type</Typography>\n      </Box>\n      {currentDeck.sideBoard.map((slot, i) => {\n        let { card } = slot;\n        return (\n          <Accordion\n            square\n            expanded={expanded === `panel${i + 1}`}\n            onChange={handleChange(`panel${i + 1}`)}\n            key={card.uuid}\n          >\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon color=\"primary\" />}\n              aria-controls={`panel${i + 1} content`}\n            >\n              <Box className={styles.summary}>\n                <Typography variant=\"body2\" className={styles.quant_info}>\n                  {slot.quantity}\n                </Typography>\n                <Typography variant=\"body2\">{card.name}</Typography>\n                <Box className={styles.mana_cost_symbols}>\n                  {card.manaCost &&\n                    findSymbols(card.manaCost).map((symbol, i) => {\n                      return (\n                        <img\n                          key={symbol + card.uuid + `${i}`}\n                          className={styles.card_symbol_img}\n                          alt=\"Card Symbol\"\n                          src={symbols[symbol]}\n                        ></img>\n                      );\n                    })}\n                </Box>\n                <Typography variant=\"body2\">{card.type}</Typography>\n              </Box>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Box className={styles.open}>\n                <img\n                  alt=\"This is a card\"\n                  src={card.imgLarge}\n                  className={styles.img}\n                  onClick={(e) => handleImgClick(e, card.imgLarge)}\n                ></img>\n                <Box className={styles.card_info}>\n                  <Typography variant=\"body2\" className={styles.rules_text}>\n                    {/* {card.text.replace(/\\{(.*?)\\}/g, fillSymbols)} */}\n                    {reactStringReplace(card.text, /\\{(.*?)\\}/g, (match, i) => {\n                      return (\n                        <img\n                          key={match + card.id + `${i}`}\n                          src={symbols[`{${match}}`]}\n                          alt=\"card symbol\"\n                          className={styles.rules_card_symbol_img}\n                        ></img>\n                      );\n                    })}\n                  </Typography>\n                  {card.flavorText ? (\n                    <Typography variant=\"body2\" className={styles.flavor_text}>\n                      {card.flavorText}\n                    </Typography>\n                  ) : null}\n                </Box>\n              </Box>\n            </AccordionDetails>\n          </Accordion>\n        );\n      })}\n    </Box>\n  );\n};\n\nexport default DeckCards;\n","/home/james/Desktop/deckstars/client/src/components/MUI_custom/Custom_Accordion.js",[],"/home/james/Desktop/deckstars/client/src/components/homepage/CardBrowser.js",["188"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { Box, Typography, Button } from \"@material-ui/core\";\nimport { MainContext } from \"../../MainContext\";\n\nimport {\n  handleRemoveCardMain,\n  handleAddCardMain,\n  handleRemoveCardSide,\n  handleAddCardSide,\n} from \"../../services/buttons\";\n\nimport cardbrowserstyles from \"../../styles/cardbrowserstyles\";\n\nconst useStyles = makeStyles((theme) => cardbrowserstyles);\n\nconst CardBrowser = () => {\n  const {\n    cards,\n    filters,\n    newDeck,\n    page,\n    setCards,\n    setFilters,\n    setPage,\n    setModalImgOpen,\n    setModalImgSrc,\n    setNewDeck,\n  } = useContext(MainContext);\n  // const [cards, setCards] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  const styles = useStyles();\n\n  const sortCards = (a, b) => {\n    let layoutA = a.layout.toLowerCase();\n    let layoutB = b.layout.toLowerCase();\n\n    if (layoutA < layoutB) {\n      return 1;\n    }\n    if (layoutA > layoutB) {\n      return -1;\n    }\n    return 0;\n  };\n\n  const temp = [];\n\n  let filterDups = (obj) => {\n    if (obj.layout === \"normal\") {\n      return true;\n    }\n    if (temp.indexOf(obj.uuid) !== -1) {\n      return false;\n    } else {\n      temp.push(obj.uuid, obj.otherFaceId);\n      return true;\n    }\n  };\n\n  const handleImgClick = (e) => {\n    if (e.target.getAttribute(\"layout\") === \"modal_dfc\") {\n      setModalImgSrc([e.target.src, e.target.getAttribute(\"backImg\")]);\n    } else {\n      setModalImgSrc([e.target.src]);\n    }\n    setModalImgOpen(true);\n  };\n\n  const handleClickPrevPage = (e) => {\n    setPage(page - 1);\n  };\n\n  const handleClickNextPage = (e) => {\n    setPage(page + 1);\n  };\n\n  useEffect(() => {\n    setLoading(false);\n    (async () => {\n      // if (!cards.length && !filters) {\n      //   const res = await fetch(`/api/cards/page/${page}`);\n      //   const foundCards = await res.json();\n      //   setCards(foundCards);\n      //   setLoading(false);\n      // } else {\n      let queryString = \"?\";\n\n      if (filters.name) {\n        queryString += `name=${filters.name}&`;\n      }\n\n      if (filters.colors.length > 0) {\n        for (let i = 0; i < filters.colors.length; i++) {\n          queryString += `colors[]=${filters.colors[i]}&`;\n        }\n      }\n\n      if (filters.cardTypes.length > 0) {\n        for (let i = 0; i < filters.cardTypes.length; i++) {\n          queryString += `cardTypes[]=${filters.cardTypes[i]}&`;\n        }\n      }\n\n      queryString += `page=${page}&`;\n\n      let res = await fetch(`api/cards/search/results${queryString}`);\n      let parsed = await res.json();\n      setCards(parsed);\n      // }\n    })();\n  }, [page, filters, setCards, cards.length]);\n\n  if (loading) {\n    return <h1 style={{ color: \"white\" }}>Loading....</h1>;\n  }\n\n  return (\n    <Box className={styles.container}>\n      <Box className={styles.page_header}>\n        <Box className={styles.page_changer}>\n          <Button\n            disabled={page <= 0}\n            onClick={(e) => handleClickPrevPage(e, newDeck, setNewDeck)}\n            className={styles.button_previous_page}\n          >\n            Prev\n          </Button>\n          <Typography className={styles.current_page}>{page + 1}</Typography>\n          <Button\n            disabled={cards.length < 20}\n            className={styles.button_next_page}\n            onClick={(e) => handleClickNextPage(e, newDeck, setNewDeck)}\n          >\n            Next\n          </Button>\n        </Box>\n      </Box>\n      <Box className={styles.card_browser}>\n        {cards\n          .filter(filterDups)\n          .sort(sortCards)\n          .map((card) => {\n            return (\n              <Box className={styles.card_panel} key={card.uuid}>\n                <img\n                  src={card.imgLarge}\n                  alt={card.name}\n                  className={styles.card_img}\n                  layout={card.layout}\n                  backImg={card.backImgLarge}\n                  onClick={(e) => handleImgClick(e)}\n                ></img>\n                <Box className={styles.card_panel_interact}>\n                  <Box className={styles.card_panel_interact_main}>\n                    <Typography\n                      className={styles.card_panel_interact_header}\n                      variant=\"body2\"\n                    >\n                      Main Deck\n                    </Typography>\n                    <button\n                      className={styles.interact_button}\n                      id={`${card.id}@${card.name}`}\n                      onClick={(e) =>\n                        handleRemoveCardMain(e, newDeck, setNewDeck)\n                      }\n                    >\n                      -1\n                    </button>\n                    <button\n                      artcrop={card.artCrop}\n                      className={styles.interact_button}\n                      id={`${card.id}@${card.name}`}\n                      onClick={(e) => handleAddCardMain(e, newDeck, setNewDeck)}\n                    >\n                      +1\n                    </button>\n                  </Box>\n                  <Box className={styles.card_panel_interact_main}>\n                    <Typography\n                      className={styles.card_panel_interact_header}\n                      variant=\"body2\"\n                    >\n                      Side Board\n                    </Typography>\n                    <button\n                      className={styles.interact_button}\n                      id={`${card.id}@${card.name}`}\n                      onClick={(e) =>\n                        handleRemoveCardSide(e, newDeck, setNewDeck)\n                      }\n                    >\n                      -1\n                    </button>\n                    <button\n                      artcrop={card.artCrop}\n                      className={styles.interact_button}\n                      id={`${card.id}@${card.name}`}\n                      onClick={(e) => handleAddCardSide(e, newDeck, setNewDeck)}\n                    >\n                      +1\n                    </button>\n                  </Box>\n                </Box>\n              </Box>\n            );\n          })}\n      </Box>\n      <Box className={styles.page_footer}>\n        <Box className={styles.page_changer}>\n          <Button\n            disabled={page <= 0}\n            onClick={(e) => handleClickPrevPage(e)}\n            className={styles.button_previous_page}\n          >\n            Prev\n          </Button>\n          <Typography className={styles.current_page}>{page + 1}</Typography>\n          <Button\n            disabled={cards.length < 20}\n            className={styles.button_next_page}\n            onClick={(e) => handleClickNextPage(e)}\n          >\n            Next\n          </Button>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default CardBrowser;\n","/home/james/Desktop/deckstars/client/src/components/homepage/DeckForm.js",["189","190","191","192","193","194","195","196","197","198"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport {\n  Box,\n  Button,\n  Typography,\n  TextField,\n  IconButton,\n  Select,\n  FormControl,\n  InputLabel,\n} from \"@material-ui/core\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { MainContext } from \"../../MainContext\";\n\nimport deckformstyles from \"../../styles/deckformstyles\";\n\nimport {\n  handleRemoveCardMain,\n  handleAddCardMain,\n  handleRemoveCardSide,\n  handleAddCardSide,\n} from \"../../services/buttons\";\n\nconst useStyles = makeStyles((theme) => deckformstyles);\n\nconst DeckForm = () => {\n  const {\n    authenticated,\n    isEdit,\n    newDeck,\n    user,\n    setCurrentDeck,\n    setFilters,\n    setIsEdit,\n    setNewDeck,\n    setUser,\n  } = useContext(MainContext);\n  const [redirectId, setRedirectId] = useState(null);\n  const [deckName, setDeckName] = useState(\"\");\n  const [deckDescription, setDeckDescription] = useState(\"\");\n  const [deckStrat, setDeckStrat] = useState(\"\");\n  const [deckFormat, setDeckFormat] = useState(\"\");\n  const styles = useStyles();\n\n  const changeDeckName = (e) => {\n    e.preventDefault();\n    newDeck.name = e.target.value;\n    setDeckName(e.target.value);\n    // setNewDeck(newDeck);\n  };\n\n  const changeDeckDescription = (e) => {\n    e.preventDefault();\n    newDeck.description = e.target.value;\n    setDeckDescription(e.target.value);\n  };\n\n  const handleSetImg = (e) => {\n    e.preventDefault();\n    console.log(e.target.getAttribute(\"imgurl\"));\n    newDeck.imgUrl = e.target.getAttribute(\"imgurl\");\n    setNewDeck(newDeck);\n  };\n\n  const handleChangeStrat = (e) => {\n    e.preventDefault();\n    setDeckStrat(e.target.value);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!authenticated) {\n      window.alert(\n        \"You'll need to sign up if you want to save and track your decks. \\n The interface to sign up can be found in the top right corner of your screen.\"\n      );\n      return;\n    }\n    if (newDeck.mainDeck.reduce((total, obj) => total + obj, 0) < 60) {\n      window.alert(\n        \"A standard legal deck needs at least 60 cards in the Main Deck, silly!\"\n      );\n      return;\n    }\n    let tempDeck = { ...newDeck };\n    let imgUrl = newDeck.mainDeck[0].artCrop;\n    for (let i = 0; i < tempDeck.mainDeck.length; i++) {\n      tempDeck.mainDeck[i].cardId = tempDeck.mainDeck[i].id;\n      delete tempDeck.mainDeck[i].name;\n      delete tempDeck.mainDeck[i].id;\n      delete tempDeck.mainDeck[i].artCrop;\n    }\n    for (let i = 0; i < tempDeck.sideBoard.length; i++) {\n      tempDeck.sideBoard[i].cardId = tempDeck.sideBoard[i].id;\n      delete tempDeck.sideBoard[i].name;\n      delete tempDeck.sideBoard[i].id;\n      delete tempDeck.sideBoard[i].artCrop;\n    }\n    let dataToPost = {\n      userId: user.id,\n      deck: {\n        name: deckName || newDeck.name,\n        description: deckDescription || newDeck.description,\n        mainDeck: tempDeck.mainDeck,\n        sideBoard: tempDeck.sideBoard,\n        format: \"standard\",\n        imgUrl,\n      },\n    };\n    let res;\n    let parsed;\n    let tempUser;\n    if (isEdit) {\n      res = await fetch(`/api/decks/${newDeck.id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        credentials: \"include\",\n        body: JSON.stringify(dataToPost),\n      });\n    } else {\n      res = await fetch(\"/api/decks\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        credentials: \"include\",\n        body: JSON.stringify(dataToPost),\n      });\n    }\n    parsed = await res.json();\n    tempUser = { ...user };\n    const newDecksList = tempUser.decks.filter((deck) => {\n      if (deck.id === parsed.id) {\n        return false;\n      }\n      return true;\n    });\n    newDecksList.push(parsed);\n    tempUser.decks = newDecksList;\n    setUser(tempUser);\n    setFilters({\n      name: \"\",\n      colors: [],\n      cardTypes: [],\n    });\n    setRedirectId(parsed.id);\n  };\n\n  const handleEditSubmit = async (e) => {\n    const res = await fetch(`/api/decks/${newDeck.id}`, {\n      method: \"PATCH\",\n      \"Content-Type\": \"application/json\",\n      credentials: \"include\",\n      body: JSON.stringify(newDeck),\n    });\n  };\n\n  if (redirectId) {\n    return <Redirect to={`/deck/${redirectId}`} />;\n  }\n\n  return (\n    <Box className={styles.container}>\n      <form className={styles.deck_form} onSubmit={(e) => handleSubmit(e)}>\n        <Typography variant=\"caption\" className={styles.info_text}>\n          Add some cards! Tell us about your deck and strategy! The submit\n          button will hide from you at the bottom once you have finished.\n        </Typography>\n        <TextField\n          required\n          className={styles.text_field}\n          placeholder=\"Deck Name\"\n          autoComplete=\"off\"\n          onChange={(e) => changeDeckName(e)}\n          multiline={true}\n          variant=\"outlined\"\n          fullWidth={true}\n          value={newDeck.name ? newDeck.name : \"\"}\n        ></TextField>\n        <TextField\n          className={styles.text_field}\n          placeholder=\"Description\"\n          autoComplete=\"off\"\n          onChange={(e) => changeDeckDescription(e)}\n          multiline={true}\n          variant=\"outlined\"\n          fullWidth={true}\n          value={newDeck.description ? newDeck.description : \"\"}\n        ></TextField>\n        <Box className={styles.format_and_strat_container}>\n          <FormControl className={styles.select_form_control}>\n            <InputLabel shrink htmlFor=\"select-deck-strat\">\n              Strategy\n            </InputLabel>\n            <Select\n              native\n              value={deckStrat}\n              onChange={handleChangeStrat}\n              name=\"Strategy\"\n              className={styles.select}\n              inputProps={{\n                id: \"select-deck-strat\",\n                \"aria-label\": \"strategy\",\n              }}\n            >\n              <option className={styles.option} value=\"\">\n                None\n              </option>\n              <option className={styles.option} value=\"AGGRO\">\n                Aggro\n              </option>\n              <option className={styles.option} value=\"COMBO\">\n                Combo\n              </option>\n              <option className={styles.option} value=\"CONTROL\">\n                Control\n              </option>\n              <option className={styles.option} value=\"MIDRANGE\">\n                Midrange\n              </option>\n              <option className={styles.option} value=\"TEMPO\">\n                Tempo\n              </option>\n            </Select>\n          </FormControl>\n          <FormControl className={styles.select_form_control}>\n            <InputLabel shrink htmlFor=\"select-deck-format\">\n              Format\n            </InputLabel>\n            <Select\n              native\n              value={deckStrat}\n              onChange={handleChangeStrat}\n              name=\"Format\"\n              disabled={true}\n              className={styles.select}\n              inputProps={{\n                id: \"select-deck-format\",\n                \"aria-label\": \"format\",\n              }}\n            >\n              <option className={styles.option} value=\"standard\">\n                Standard\n              </option>\n            </Select>\n          </FormControl>\n        </Box>\n        <Box className={styles.deck_list_main}>\n          <Box className={styles.main_deck_top}>\n            <Typography color=\"primary\">Main Deck</Typography>\n            <Typography\n              color={\n                newDeck.mainDeck.reduce(\n                  (total, obj) => total + obj.quantity,\n                  0\n                ) < 60\n                  ? \"error\"\n                  : \"primary\"\n              }\n            >\n              Cards{\" \"}\n              {newDeck.mainDeck.reduce((total, obj) => total + obj.quantity, 0)}\n            </Typography>\n          </Box>\n          <Box className={styles.header}>\n            <Typography>#</Typography>\n            <Typography>Card Name</Typography>\n          </Box>\n          <Box>\n            {newDeck.mainDeck.length > 0 &&\n              newDeck.mainDeck.map((card) => (\n                <Box key={card.id} className={styles.card_details}>\n                  <Typography variant=\"body2\" className={styles.card_quantity}>\n                    {card.quantity}\n                  </Typography>\n                  <Typography variant=\"body2\" className={styles.card_name}>\n                    {card.name}\n                  </Typography>\n                  <Box className={styles.interact_suite}>\n                    <button\n                      className={styles.interact_button}\n                      id={`${card.id}@${card.name}`}\n                      onClick={(e) =>\n                        handleRemoveCardMain(e, newDeck, setNewDeck)\n                      }\n                    >\n                      -1\n                    </button>\n                    <button\n                      className={styles.interact_button}\n                      id={`${card.id}@${card.name}`}\n                      onClick={(e) => handleAddCardMain(e, newDeck, setNewDeck)}\n                    >\n                      +1\n                    </button>\n                  </Box>\n                </Box>\n              ))}\n          </Box>\n        </Box>\n        <Box className={styles.deck_list_main}>\n          <Box className={styles.sideboard_top}>\n            <Typography color=\"primary\">Side Board</Typography>\n            <Typography\n              color={\n                newDeck.sideBoard.reduce(\n                  (total, obj) => total + obj.quantity,\n                  0\n                ) < 15\n                  ? \"error\"\n                  : \"primary\"\n              }\n            >\n              Cards{\" \"}\n              {newDeck.sideBoard.reduce(\n                (total, obj) => total + obj.quantity,\n                0\n              )}\n            </Typography>\n          </Box>\n          <Box className={styles.header}>\n            <Typography>#</Typography>\n            <Typography>Card Name</Typography>\n          </Box>\n          <Box>\n            {newDeck.sideBoard.length > 0 &&\n              newDeck.sideBoard.map((card) => (\n                <Box key={card.id} className={styles.card_details}>\n                  <Typography variant=\"body2\" className={styles.card_quantity}>\n                    {card.quantity}\n                  </Typography>\n                  <Typography variant=\"body2\" className={styles.card_name}>\n                    {card.name}\n                  </Typography>\n                  <Box className={styles.interact_suite}>\n                    <button\n                      className={styles.interact_button}\n                      id={`${card.id}@${card.name}`}\n                      onClick={(e) =>\n                        handleRemoveCardSide(e, newDeck, setNewDeck)\n                      }\n                    >\n                      -1\n                    </button>\n                    <button\n                      className={styles.interact_button}\n                      id={`${card.id}@${card.name}`}\n                      onClick={(e) => handleAddCardSide(e, newDeck, setNewDeck)}\n                    >\n                      +1\n                    </button>\n                  </Box>\n                </Box>\n              ))}\n          </Box>\n        </Box>\n        <Button className={styles.submit_button} type=\"submit\">\n          Submit\n        </Button>\n      </form>\n    </Box>\n  );\n};\n\nexport default DeckForm;\n","/home/james/Desktop/deckstars/client/src/services/buttons.js",["199","200"],"import React, { useContext } from \"react\";\n\nexport const handleRemoveCardMain = (e, newDeck, f) => {\n  e.preventDefault();\n  let idName = e.target.id.split(\"@\");\n  let tempDeck = { ...newDeck };\n  tempDeck.mainDeck.forEach((card, i) => {\n    if (card.id === parseInt(idName[0])) {\n      card.quantity -= 1;\n    }\n  });\n  let newMainDeck = tempDeck.mainDeck.filter((card) => card.quantity > 0);\n  tempDeck.mainDeck = newMainDeck;\n  f(tempDeck);\n};\n\nexport const handleAddCardMain = (e, newDeck, f) => {\n  e.preventDefault();\n  let idName = e.target.id.split(\"@\");\n  const tempDeck = { ...newDeck };\n  let found = false;\n  tempDeck.mainDeck.forEach((card, i) => {\n    if (card.id === parseInt(idName[0])) {\n      card.quantity += 1;\n      found = true;\n    }\n  });\n  if (!found) {\n    tempDeck.mainDeck.push({\n      id: parseInt(idName[0]),\n      name: idName[1],\n      quantity: 1,\n      artCrop: e.target.getAttribute(\"artcrop\"),\n    });\n  }\n  f(tempDeck);\n};\n\nexport const handleRemoveCardSide = (e, newDeck, f) => {\n  e.preventDefault();\n  let idName = e.target.id.split(\"@\");\n  let tempDeck = { ...newDeck };\n  tempDeck.sideBoard.forEach((card, i) => {\n    if (card.id === parseInt(idName[0])) {\n      card.quantity -= 1;\n    }\n  });\n  let newMainDeck = tempDeck.sideBoard.filter((card) => card.quantity > 0);\n  tempDeck.sideBoard = newMainDeck;\n  f(tempDeck);\n};\n\nexport const handleAddCardSide = (e, newDeck, f) => {\n  e.preventDefault();\n  let idName = e.target.id.split(\"@\");\n  const tempDeck = { ...newDeck };\n  let found = false;\n  tempDeck.sideBoard.forEach((card, i) => {\n    if (card.id === parseInt(idName[0])) {\n      card.quantity += 1;\n      found = true;\n    }\n  });\n  if (!found) {\n    tempDeck.sideBoard.push({\n      id: parseInt(idName[0]),\n      name: idName[1],\n      quantity: 1,\n    });\n  }\n  f(tempDeck);\n};\n","/home/james/Desktop/deckstars/client/src/styles/deckformstyles.js",[],"/home/james/Desktop/deckstars/client/src/styles/homepageleftstyles.js",[],"/home/james/Desktop/deckstars/client/src/styles/deckcardstyles.js",[],"/home/james/Desktop/deckstars/client/src/components/homepage/CardFilter.js",["201","202","203"],"import React, { useContext, useState, useEffect } from \"react\";\nimport { MainContext } from \"../../MainContext\";\nimport {\n  Box,\n  Typograhpy,\n  Typography,\n  FormControl,\n  FormGroup,\n  FormLabel,\n  FormControlLabel,\n  FormHelperText,\n  Checkbox,\n  TextField,\n  Button,\n} from \"@material-ui/core\";\nimport {\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n} from \"../MUI_custom/Filters_Custom_Accordion\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nimport { makeStyles } from \"@material-ui/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    height: \"100%\",\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"70%\",\n    height: \"100%\",\n    display: \"grid\",\n    gridTemplateColumns: \"6fr 1fr 8fr 1fr 2fr\",\n  },\n  search_container: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  text_field: {\n    backgroundColor: theme.palette.secondary.light,\n  },\n  filters_container: {\n    display: \"flex\",\n    alignItems: \"center\",\n    color: \"white\",\n  },\n  filters: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"56px\",\n    width: \"100%\",\n  },\n  accordion: {\n    height: \"100%\",\n    width: \"100%\",\n    zIndex: 3,\n    backgroundColor: theme.palette.secondary.light,\n    color: \"white\",\n    // border: \"1px solid white\",\n  },\n  accordion_summary: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    border: \"1px solid white\",\n    boxSizing: \"border-box\",\n  },\n  expanded_details: {\n    backgroundColor: theme.palette.secondary.main,\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  selected_filters: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    marginLeft: \"20px\",\n  },\n  card_type_filters: {\n    display: \"flex\",\n  },\n  submit_container: {\n    display: \"flex\",\n    height: \"100%\",\n    alignItems: \"center\",\n  },\n  button_submit: {\n    backgroundColor: theme.palette.primary.main,\n    height: \"50px\",\n    \"&:hover\": {\n      backgroundColor: theme.palette.primary.light,\n    },\n  },\n  types_container: {\n    display: \"grid\",\n    gridTemplateColumns: \"1fr 1fr 1fr 1fr 1fr\",\n  },\n  check_box_container: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  check_box: {\n    color: theme.palette.secondary.light,\n  },\n  colors_container: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    padding: \"0px 20px 0px 0px\",\n  },\n  mana_symbol: {\n    height: \"2rem\",\n    width: \"auto\",\n  },\n}));\n\nconst CardFilter = () => {\n  const { symbols, setFilters, setPage } = useContext(MainContext);\n  const [searchString, setSearchString] = useState(\"\");\n  const [cardTypes, setCardTypes] = useState([]);\n  const [checkedTypes, setCheckedTypes] = useState([]);\n  const [checkedColors, setCheckedColors] = useState([]);\n\n  const styles = useStyles();\n\n  const colors = [\n    { identifier: \"W\", symbol: \"{W}\" },\n    { identifier: \"U\", symbol: \"{U}\" },\n    { identifier: \"B\", symbol: \"{B}\" },\n    { identifier: \"R\", symbol: \"{R}\" },\n    { identifier: \"G\", symbol: \"{G}\" },\n    { identifier: \"C\", symbol: \"{C}\" },\n  ];\n\n  useEffect(() => {\n    (async () => {\n      const res = await fetch(\"/api/cardtypes\");\n      const parsed = await res.json();\n      setCardTypes(parsed);\n    })();\n  }, []);\n\n  const handleChange = (e) => {\n    e.preventDefault();\n    setSearchString(e.target.value);\n  };\n\n  const handleChangeTypeCheck = (e) => {\n    if (checkedTypes.includes(e.target.name)) {\n      setCheckedTypes([\n        ...checkedTypes.filter((name) => name !== e.target.name),\n      ]);\n    } else {\n      setCheckedTypes([...checkedTypes, e.target.name]);\n    }\n  };\n\n  const handleChangeColorCheck = (e) => {\n    if (checkedColors.includes(e.target.name)) {\n      setCheckedColors([\n        ...checkedColors.filter((name) => name !== e.target.name),\n      ]);\n    } else {\n      setCheckedColors([...checkedColors, e.target.name]);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setPage(0);\n    const queryObj = {\n      name: \"\",\n      colors: [],\n      cardTypes: [],\n    };\n\n    if (searchString) {\n      queryObj[\"name\"] = searchString;\n    }\n\n    if (checkedColors.length > 0) {\n      queryObj[\"colors\"] = checkedColors;\n    }\n\n    if (checkedTypes.length > 0) {\n      queryObj[\"cardTypes\"] = checkedTypes;\n    }\n    setFilters(queryObj);\n\n    // const res = await fetch(`/api/cards/search/results${queryString}`);\n    // // const parsed = await res.json();\n    // // setCards(parsed);\n    // let parsed = await res.json();\n    // setCards(parsed);\n  };\n\n  return (\n    <Box className={styles.container}>\n      <form className={styles.form} onSubmit={(e) => handleSubmit(e)}>\n        <Box className={styles.search_container}>\n          <TextField\n            className={styles.text_field}\n            variant=\"outlined\"\n            placeholder=\"Search for a card\"\n            onChange={(e) => handleChange(e)}\n            fullWidth={true}\n          ></TextField>\n        </Box>\n        <Box></Box>\n        <Box className={styles.filters_container}>\n          <Box className={styles.filters}>\n            <Accordion className={styles.accordion}>\n              <AccordionSummary\n                expandIcon={<ExpandMoreIcon color=\"primary\" />}\n                aria-controls=\"expand filters\"\n                className={styles.accordion_summary}\n              >\n                <Typography>Filters</Typography>\n              </AccordionSummary>\n              <AccordionDetails className={styles.expanded_details}>\n                <FormControl\n                  component=\"fieldset\"\n                  className={styles.card_type_filters}\n                >\n                  <FormLabel component=\"legend\">Card Types</FormLabel>\n                  <FormGroup row={true} className={styles.types_container}>\n                    {cardTypes.map((type, i) => {\n                      return (\n                        <Box className={styles.check_box_container} key={i}>\n                          <Checkbox\n                            color=\"primary\"\n                            checked={checkedTypes.includes(type.name)}\n                            onChange={handleChangeTypeCheck}\n                            name={type.name}\n                            className={styles.check_box}\n                          />\n                          <Typography variant=\"caption\">{type.name}</Typography>\n                        </Box>\n                      );\n                    })}\n                  </FormGroup>\n                </FormControl>\n                <FormControl\n                  component=\"fieldset\"\n                  className={styles.color_filters}\n                >\n                  <FormLabel component=\"legend\">Colors</FormLabel>\n                  <FormGroup row={true} className={styles.colors_container}>\n                    {colors.map((color, i) => {\n                      return (\n                        <Box className={styles.check_box_container} key={i}>\n                          <Checkbox\n                            color=\"primary\"\n                            checked={checkedColors.includes(color.identifier)}\n                            onChange={handleChangeColorCheck}\n                            name={color.identifier}\n                            className={styles.check_box}\n                          />\n                          <img\n                            alt={`${color.identifier} mana symbol`}\n                            src={symbols[color.symbol]}\n                            className={styles.mana_symbol}\n                          ></img>\n                        </Box>\n                      );\n                    })}\n                  </FormGroup>\n                </FormControl>\n              </AccordionDetails>\n            </Accordion>\n          </Box>\n        </Box>\n        <Box></Box>\n        <Box className={styles.submit_container}>\n          <Button className={styles.button_submit} type=\"submit\">\n            Search\n          </Button>\n        </Box>\n      </form>\n    </Box>\n  );\n};\n\nexport default CardFilter;\n","/home/james/Desktop/deckstars/client/src/components/MUI_custom/Filters_Custom_Accordion.js",[],"/home/james/Desktop/deckstars/client/src/styles/cardbrowserstyles.js",[],"/home/james/Desktop/deckstars/client/src/components/deckcards/CustomDetails.js",[],"/home/james/Desktop/deckstars/client/src/components/homepage/DeckBrowser.js",["204","205","206","207"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { Box, Typography, Button } from \"@material-ui/core\";\nimport { MainContext } from \"../../MainContext\";\nimport deckbrowserstyles from \"../../styles/deckbrowserstyles\";\n\nconst useStyles = makeStyles((theme) => deckbrowserstyles);\n\nconst DeckBrowser = () => {\n  const { filters, page, setCurrentDeck, setFilters, setPage } = useContext(\n    MainContext\n  );\n  const [decks, setDecks] = useState([]);\n  const history = useHistory();\n\n  const styles = useStyles();\n\n  useEffect(() => {\n    (async () => {\n      let queryString = \"?\";\n\n      if (filters.name) {\n        queryString += `name=${filters.name}&`;\n      }\n\n      if (filters.cards) {\n        filters.cards.forEach((card) => {\n          queryString += `cards[]=${card}&`;\n        });\n      }\n\n      if (filters.colors.length > 0) {\n        filters.colors.forEach((color) => {\n          queryString += `colors[]=${color}&`;\n        });\n      }\n\n      if (filters.deckStrat) {\n        queryString += `strat=${filters.deckStrat}&`;\n      }\n\n      queryString += `page=${page}&`;\n      let res = await fetch(`api/decks/search/results${queryString}`);\n      let parsed = await res.json();\n      setDecks(parsed);\n    })();\n    setCurrentDeck(null);\n  }, [filters]);\n\n  const handleClickPrevPage = (e) => {\n    setPage(page - 1);\n  };\n\n  const handleClickNextPage = (e) => {\n    setPage(page + 1);\n  };\n\n  const handleDeckClick = async (e, deckId) => {\n    e.preventDefault();\n    let foundDeck = await fetch(`/api/decks/${deckId}`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const parsedDeck = await foundDeck.json();\n    setCurrentDeck(parsedDeck);\n  };\n\n  return (\n    <Box className={styles.container}>\n      <Box className={styles.page_header}>\n        <Box className={styles.page_changer}>\n          <Button\n            disabled={page <= 0}\n            onClick={(e) => handleClickPrevPage(e)}\n            className={styles.button_previous_page}\n          >\n            Prev\n          </Button>\n          <Typography className={styles.current_page}>{page}</Typography>\n          <Button\n            disabled={decks.length < 20}\n            className={styles.button_next_page}\n            onClick={(e) => handleClickNextPage(e)}\n          >\n            Next\n          </Button>\n        </Box>\n      </Box>\n      <Box className={styles.deck_browser}>\n        {decks.map((deck) => {\n          return (\n            <Box key={deck.id} id={deck.id} className={styles.deck_panel}>\n              <img\n                src={deck.imgUrl}\n                alt={deck.name}\n                className={styles.deck_img}\n                onClick={(e) => handleDeckClick(e, deck.id)}\n              ></img>\n              <Typography className={styles.deck_panel__text} variant=\"h6\">\n                {deck.name}\n              </Typography>\n              <Typography className={styles.deck_panel__text} variant=\"body2\">\n                Creator: {deck.user.username}\n              </Typography>\n            </Box>\n          );\n        })}\n      </Box>\n      <Box className={styles.page_footer}>\n        <Box className={styles.page_changer}>\n          <Button\n            disabled={page <= 0}\n            onClick={(e) => handleClickPrevPage(e)}\n            className={styles.button_previous_page}\n          >\n            Prev\n          </Button>\n          <Typography className={styles.current_page}>{page}</Typography>\n          <Button\n            disabled={decks.length < 20}\n            className={styles.button_next_page}\n            onClick={(e) => handleClickNextPage(e)}\n          >\n            Next\n          </Button>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default DeckBrowser;\n","/home/james/Desktop/deckstars/client/src/styles/deckbrowserstyles.js",[],"/home/james/Desktop/deckstars/client/src/styles/deckdetailstyles.js",[],"/home/james/Desktop/deckstars/client/src/components/homepage/DeckFilter.js",["208","209"],"import React, { useContext, useState, useEffect } from \"react\";\nimport { MainContext } from \"../../MainContext\";\nimport {\n  Box,\n  Typography,\n  FormControl,\n  FormGroup,\n  FormLabel,\n  CheckBox,\n  TextField,\n  Button,\n  Checkbox,\n} from \"@material-ui/core\";\n\nimport {\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n} from \"../MUI_custom/Filters_Custom_Accordion\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nimport { makeStyles } from \"@material-ui/styles\";\n\nimport deckfilterstyles from \"../../styles/deckfilterstyles\";\n\nconst useStyles = makeStyles((theme) => deckfilterstyles);\n\nconst DeckFilter = () => {\n  const { symbols, setFilters, setPage } = useContext(MainContext);\n  const [searchDeckName, setSearchDeckName] = useState(\"\");\n  const [searchCardNames, setSearchCardNames] = useState(\"\");\n  const [checkedColors, setCheckedColors] = useState([]);\n  const [checkedStrat, setCheckedStrat] = useState(\"\");\n\n  const styles = useStyles();\n\n  const colors = [\n    { identifier: \"W\", symbol: \"{W}\" },\n    { identifier: \"U\", symbol: \"{U}\" },\n    { identifier: \"B\", symbol: \"{B}\" },\n    { identifier: \"R\", symbol: \"{R}\" },\n    { identifier: \"G\", symbol: \"{G}\" },\n    { identifier: \"C\", symbol: \"{C}\" },\n  ];\n\n  const handleNameSearchChange = (e) => {\n    e.preventDefault();\n    setSearchDeckName(e.target.value);\n  };\n\n  const handleChangeSearchCardNames = (e) => {\n    e.preventDefault();\n    setSearchCardNames(e.target.value);\n  };\n\n  const handleChangeColorCheck = (e) => {\n    if (checkedColors.includes(e.target.name)) {\n      setCheckedColors([\n        ...checkedColors.filter((name) => name !== e.target.name),\n      ]);\n    } else {\n      setCheckedColors([...checkedColors, e.target.name]);\n    }\n  };\n\n  const handleChangeStratCheck = (e) => {\n    if (checkedStrat === e.target.name) {\n      setCheckedStrat(\"\");\n    } else {\n      setCheckedStrat(e.target.name);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setPage(0);\n    const queryObj = {\n      name: \"\",\n      deckStrat: \"\",\n      cards: [],\n      colors: [],\n    };\n\n    if (searchDeckName) {\n      queryObj[\"name\"] = searchDeckName;\n    }\n    if (searchCardNames) {\n      queryObj[\"cards\"] = searchCardNames.split(\"@\");\n    }\n    if (checkedStrat) {\n      queryObj[\"deckStrat\"] = checkedStrat;\n    }\n    if (checkedColors.length > 0) {\n      queryObj[\"colors\"] = checkedColors;\n    }\n    setFilters(queryObj);\n  };\n\n  return (\n    <Box className={styles.container}>\n      <form className={styles.form} onSubmit={(e) => handleSubmit(e)}>\n        <Box className={styles.search_container}>\n          <TextField\n            size=\"small\"\n            className={styles.text_field_deck_name}\n            variant=\"outlined\"\n            placeholder=\"Search deck names\"\n            onChange={(e) => handleNameSearchChange(e)}\n            fullWidth={true}\n          ></TextField>\n        </Box>\n        <Box></Box>\n        <Box className={styles.search_container}>\n          <TextField\n            size=\"small\"\n            className={styles.text_field_card_names}\n            variant=\"outlined\"\n            placeholder=\"Search card names (separate with @)\"\n            onChange={(e) => handleChangeSearchCardNames(e)}\n            fullWidth={true}\n          ></TextField>\n        </Box>\n        <Box></Box>\n        <Box className={styles.filters_container}>\n          <Box className={styles.filters}>\n            <Accordion className={styles.accordion}>\n              <AccordionSummary\n                expandIcon={<ExpandMoreIcon color=\"primary\" />}\n                aria-controls=\"expand filters\"\n                className={styles.accordion_summary}\n              >\n                <Typography>Filters</Typography>\n              </AccordionSummary>\n              <AccordionDetails className={styles.expanded_details}>\n                <FormControl\n                  component=\"fieldset\"\n                  className={styles.colors_filters}\n                >\n                  <FormLabel component=\"legend\">Colors</FormLabel>\n                  <FormGroup row={true} className={styles.colors_container}>\n                    {colors.map((color, i) => {\n                      return (\n                        <Box className={styles.check_box_container} key={i}>\n                          <Checkbox\n                            color=\"primary\"\n                            checked={checkedColors.includes(color.identifier)}\n                            onChange={handleChangeColorCheck}\n                            name={color.identifier}\n                            className={styles.check_box}\n                          />\n                          <img\n                            alt={`${color.identifier} mana symbol`}\n                            src={symbols[color.symbol]}\n                            className={styles.mana_symbol}\n                          ></img>\n                        </Box>\n                      );\n                    })}\n                  </FormGroup>\n                </FormControl>\n                <FormControl\n                  component=\"fieldset\"\n                  className={styles.strat_filters}\n                >\n                  <FormLabel component=\"legend\">Strategies</FormLabel>\n                  <FormGroup row={true} className={styles.strats_container}>\n                    {[\"AGGRO\", \"CONTROL\", \"COMBO\", \"MIDRANGE\"].map(\n                      (strat, i) => {\n                        return (\n                          <Box className={styles.check_box_container} key={i}>\n                            <Checkbox\n                              color=\"primary\"\n                              checked={checkedStrat === strat}\n                              onChange={handleChangeStratCheck}\n                              name={strat}\n                              className={styles.check_box}\n                            />\n                            <Typography variant=\"caption\">\n                              {strat[0].toUpperCase() +\n                                strat.slice(1).toLowerCase()}\n                            </Typography>\n                          </Box>\n                        );\n                      }\n                    )}\n                  </FormGroup>\n                </FormControl>\n              </AccordionDetails>\n            </Accordion>\n          </Box>\n        </Box>\n        <Box></Box>\n        <Box className={styles.submit_container}>\n          <Button className={styles.button_submit} type=\"submit\">\n            Search\n          </Button>\n        </Box>\n      </form>\n    </Box>\n  );\n};\n\nexport default DeckFilter;\n","/home/james/Desktop/deckstars/client/src/styles/deckfilterstyles.js",[],{"ruleId":"210","replacedBy":"211"},{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","severity":1,"message":"215","line":2,"column":17,"nodeType":"216","messageId":"217","endLine":2,"endColumn":26},{"ruleId":"214","severity":1,"message":"218","line":3,"column":32,"nodeType":"216","messageId":"217","endLine":3,"endColumn":38},{"ruleId":"214","severity":1,"message":"219","line":4,"column":10,"nodeType":"216","messageId":"217","endLine":4,"endColumn":20},{"ruleId":"214","severity":1,"message":"220","line":7,"column":8,"nodeType":"216","messageId":"217","endLine":7,"endColumn":20},{"ruleId":"214","severity":1,"message":"221","line":11,"column":15,"nodeType":"216","messageId":"217","endLine":11,"endColumn":31},{"ruleId":"214","severity":1,"message":"222","line":32,"column":11,"nodeType":"216","messageId":"217","endLine":32,"endColumn":24},{"ruleId":"214","severity":1,"message":"223","line":33,"column":11,"nodeType":"216","messageId":"217","endLine":33,"endColumn":18},{"ruleId":"214","severity":1,"message":"224","line":17,"column":9,"nodeType":"216","messageId":"217","endLine":17,"endColumn":16},{"ruleId":"214","severity":1,"message":"225","line":12,"column":29,"nodeType":"216","messageId":"217","endLine":12,"endColumn":39},{"ruleId":"214","severity":1,"message":"215","line":1,"column":17,"nodeType":"216","messageId":"217","endLine":1,"endColumn":26},{"ruleId":"214","severity":1,"message":"226","line":2,"column":25,"nodeType":"216","messageId":"217","endLine":2,"endColumn":36},{"ruleId":"214","severity":1,"message":"227","line":2,"column":38,"nodeType":"216","messageId":"217","endLine":2,"endColumn":47},{"ruleId":"214","severity":1,"message":"220","line":3,"column":8,"nodeType":"216","messageId":"217","endLine":3,"endColumn":20},{"ruleId":"214","severity":1,"message":"215","line":1,"column":29,"nodeType":"216","messageId":"217","endLine":1,"endColumn":38},{"ruleId":"214","severity":1,"message":"228","line":1,"column":40,"nodeType":"216","messageId":"217","endLine":1,"endColumn":48},{"ruleId":"214","severity":1,"message":"229","line":2,"column":28,"nodeType":"216","messageId":"217","endLine":2,"endColumn":38},{"ruleId":"214","severity":1,"message":"230","line":5,"column":8,"nodeType":"216","messageId":"217","endLine":5,"endColumn":16},{"ruleId":"214","severity":1,"message":"231","line":40,"column":11,"nodeType":"216","messageId":"217","endLine":40,"endColumn":25},{"ruleId":"214","severity":1,"message":"232","line":40,"column":39,"nodeType":"216","messageId":"217","endLine":40,"endColumn":49},{"ruleId":"214","severity":1,"message":"233","line":2,"column":10,"nodeType":"216","messageId":"217","endLine":2,"endColumn":14},{"ruleId":"214","severity":1,"message":"234","line":8,"column":3,"nodeType":"216","messageId":"217","endLine":8,"endColumn":19},{"ruleId":"214","severity":1,"message":"235","line":10,"column":27,"nodeType":"216","messageId":"217","endLine":10,"endColumn":41},{"ruleId":"214","severity":1,"message":"236","line":24,"column":5,"nodeType":"216","messageId":"217","endLine":24,"endColumn":19},{"ruleId":"214","severity":1,"message":"237","line":25,"column":5,"nodeType":"216","messageId":"217","endLine":25,"endColumn":20},{"ruleId":"238","severity":1,"message":"239","line":63,"column":6,"nodeType":"240","endLine":63,"endColumn":30,"suggestions":"241"},{"ruleId":"214","severity":1,"message":"232","line":24,"column":5,"nodeType":"216","messageId":"217","endLine":24,"endColumn":15},{"ruleId":"214","severity":1,"message":"215","line":1,"column":27,"nodeType":"216","messageId":"217","endLine":1,"endColumn":36},{"ruleId":"214","severity":1,"message":"242","line":8,"column":3,"nodeType":"216","messageId":"217","endLine":8,"endColumn":13},{"ruleId":"214","severity":1,"message":"243","line":13,"column":8,"nodeType":"216","messageId":"217","endLine":13,"endColumn":17},{"ruleId":"214","severity":1,"message":"231","line":34,"column":5,"nodeType":"216","messageId":"217","endLine":34,"endColumn":19},{"ruleId":"214","severity":1,"message":"244","line":36,"column":5,"nodeType":"216","messageId":"217","endLine":36,"endColumn":14},{"ruleId":"214","severity":1,"message":"245","line":44,"column":10,"nodeType":"216","messageId":"217","endLine":44,"endColumn":20},{"ruleId":"214","severity":1,"message":"246","line":44,"column":22,"nodeType":"216","messageId":"217","endLine":44,"endColumn":35},{"ruleId":"214","severity":1,"message":"247","line":60,"column":9,"nodeType":"216","messageId":"217","endLine":60,"endColumn":21},{"ruleId":"214","severity":1,"message":"248","line":152,"column":9,"nodeType":"216","messageId":"217","endLine":152,"endColumn":25},{"ruleId":"214","severity":1,"message":"249","line":153,"column":11,"nodeType":"216","messageId":"217","endLine":153,"endColumn":14},{"ruleId":"214","severity":1,"message":"250","line":1,"column":8,"nodeType":"216","messageId":"217","endLine":1,"endColumn":13},{"ruleId":"214","severity":1,"message":"251","line":1,"column":17,"nodeType":"216","messageId":"217","endLine":1,"endColumn":27},{"ruleId":"214","severity":1,"message":"252","line":5,"column":3,"nodeType":"216","messageId":"217","endLine":5,"endColumn":13},{"ruleId":"214","severity":1,"message":"253","line":10,"column":3,"nodeType":"216","messageId":"217","endLine":10,"endColumn":19},{"ruleId":"214","severity":1,"message":"254","line":11,"column":3,"nodeType":"216","messageId":"217","endLine":11,"endColumn":17},{"ruleId":"214","severity":1,"message":"233","line":2,"column":10,"nodeType":"216","messageId":"217","endLine":2,"endColumn":14},{"ruleId":"214","severity":1,"message":"232","line":11,"column":42,"nodeType":"216","messageId":"217","endLine":11,"endColumn":52},{"ruleId":"214","severity":1,"message":"224","line":15,"column":9,"nodeType":"216","messageId":"217","endLine":15,"endColumn":16},{"ruleId":"238","severity":1,"message":"255","line":49,"column":6,"nodeType":"240","endLine":49,"endColumn":15,"suggestions":"256"},{"ruleId":"214","severity":1,"message":"215","line":1,"column":39,"nodeType":"216","messageId":"217","endLine":1,"endColumn":48},{"ruleId":"214","severity":1,"message":"257","line":9,"column":3,"nodeType":"216","messageId":"217","endLine":9,"endColumn":11},"no-native-reassign",["258"],"no-negated-in-lhs",["259"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'SplashPage' is defined but never used.","'PrivateRoute' is defined but never used.","'CircularProgress' is defined but never used.","'authenticated' is assigned a value but never used.","'loading' is assigned a value but never used.","'history' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'useLocation' is defined but never used.","'useParams' is defined but never used.","'useState' is defined but never used.","'useHistory' is defined but never used.","'EditIcon' is defined but never used.","'setCurrentDeck' is assigned a value but never used.","'setFilters' is assigned a value but never used.","'Link' is defined but never used.","'AccordionDetails' is defined but never used.","'LinearProgress' is defined but never used.","'setModalImgSrc' is assigned a value but never used.","'setModalImgOpen' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setLoading'. Either include it or remove the dependency array.","ArrayExpression",["260"],"'IconButton' is defined but never used.","'ImageIcon' is defined but never used.","'setIsEdit' is assigned a value but never used.","'deckFormat' is assigned a value but never used.","'setDeckFormat' is assigned a value but never used.","'handleSetImg' is assigned a value but never used.","'handleEditSubmit' is assigned a value but never used.","'res' is assigned a value but never used.","'React' is defined but never used.","'useContext' is defined but never used.","'Typograhpy' is defined but never used.","'FormControlLabel' is defined but never used.","'FormHelperText' is defined but never used.","React Hook useEffect has missing dependencies: 'page' and 'setCurrentDeck'. Either include them or remove the dependency array.",["261"],"'CheckBox' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},"Update the dependencies array to be: [deckId, setCurrentDeck, setLoading]",{"range":"266","text":"267"},"Update the dependencies array to be: [filters, page, setCurrentDeck]",{"range":"268","text":"269"},[1775,1799],"[deckId, setCurrentDeck, setLoading]",[1378,1387],"[filters, page, setCurrentDeck]"]
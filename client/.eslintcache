[{"/home/james/Desktop/deckstars/client/src/index.js":"1","/home/james/Desktop/deckstars/client/src/App.js":"2","/home/james/Desktop/deckstars/client/src/components/SplashPage.js":"3","/home/james/Desktop/deckstars/client/src/services/auth.js":"4","/home/james/Desktop/deckstars/client/src/MainContext.js":"5","/home/james/Desktop/deckstars/client/src/theme/mui_theme.js":"6","/home/james/Desktop/deckstars/client/src/styles/navbarstyles.js":"7","/home/james/Desktop/deckstars/client/src/components/nav/NavBar.js":"8","/home/james/Desktop/deckstars/client/src/components/nav/NavLogin.js":"9","/home/james/Desktop/deckstars/client/src/components/nav/NavMenu.js":"10","/home/james/Desktop/deckstars/client/src/components/SignUpForm.js":"11","/home/james/Desktop/deckstars/client/src/components/HomePage.js":"12","/home/james/Desktop/deckstars/client/src/components/PrivateRoute.js":"13","/home/james/Desktop/deckstars/client/src/styles/homepagestyles.js":"14","/home/james/Desktop/deckstars/client/src/styles/signupformstyles.js":"15","/home/james/Desktop/deckstars/client/src/styles/navmenustyles.js":"16","/home/james/Desktop/deckstars/client/src/components/DeckDetails.js":"17","/home/james/Desktop/deckstars/client/src/components/DeckInfo.js":"18","/home/james/Desktop/deckstars/client/src/components/homepage/HomePageLeft.js":"19","/home/james/Desktop/deckstars/client/src/components/homepage/DeckCards.js":"20","/home/james/Desktop/deckstars/client/src/components/MUI_custom/Custom_Accordion.js":"21","/home/james/Desktop/deckstars/client/src/components/homepage/CardBrowser.js":"22","/home/james/Desktop/deckstars/client/src/components/homepage/DeckForm.js":"23","/home/james/Desktop/deckstars/client/src/services/buttons.js":"24","/home/james/Desktop/deckstars/client/src/styles/deckformstyles.js":"25","/home/james/Desktop/deckstars/client/src/styles/homepageleftstyles.js":"26","/home/james/Desktop/deckstars/client/src/styles/deckcardstyles.js":"27","/home/james/Desktop/deckstars/client/src/components/homepage/CardFilter.js":"28","/home/james/Desktop/deckstars/client/src/components/MUI_custom/Filters_Custom_Accordion.js":"29","/home/james/Desktop/deckstars/client/src/styles/cardbrowserstyles.js":"30"},{"size":305,"mtime":1611868324515,"results":"31","hashOfConfig":"32"},{"size":1483,"mtime":1612284789716,"results":"33","hashOfConfig":"32"},{"size":192,"mtime":1612290856265,"results":"34","hashOfConfig":"32"},{"size":1235,"mtime":1612284859382,"results":"35","hashOfConfig":"32"},{"size":2072,"mtime":1612464054154,"results":"36","hashOfConfig":"32"},{"size":742,"mtime":1611800004853,"results":"37","hashOfConfig":"32"},{"size":1684,"mtime":1612138576137,"results":"38","hashOfConfig":"32"},{"size":1179,"mtime":1611869813027,"results":"39","hashOfConfig":"32"},{"size":3366,"mtime":1612284850478,"results":"40","hashOfConfig":"32"},{"size":1591,"mtime":1612213092728,"results":"41","hashOfConfig":"32"},{"size":2952,"mtime":1611867361222,"results":"42","hashOfConfig":"32"},{"size":2457,"mtime":1612472476720,"results":"43","hashOfConfig":"32"},{"size":578,"mtime":1611861912966,"results":"44","hashOfConfig":"32"},{"size":947,"mtime":1612472750947,"results":"45","hashOfConfig":"32"},{"size":641,"mtime":1612138048774,"results":"46","hashOfConfig":"32"},{"size":143,"mtime":1612138601960,"results":"47","hashOfConfig":"32"},{"size":1465,"mtime":1612131718763,"results":"48","hashOfConfig":"32"},{"size":2354,"mtime":1612292431915,"results":"49","hashOfConfig":"32"},{"size":3938,"mtime":1612313683330,"results":"50","hashOfConfig":"32"},{"size":15951,"mtime":1612472554370,"results":"51","hashOfConfig":"32"},{"size":1297,"mtime":1612299831470,"results":"52","hashOfConfig":"32"},{"size":6827,"mtime":1612466108333,"results":"53","hashOfConfig":"32"},{"size":6354,"mtime":1612287776267,"results":"54","hashOfConfig":"32"},{"size":1784,"mtime":1612224861445,"results":"55","hashOfConfig":"32"},{"size":1527,"mtime":1612284865162,"results":"56","hashOfConfig":"32"},{"size":1595,"mtime":1612289866230,"results":"57","hashOfConfig":"32"},{"size":1698,"mtime":1612472864237,"results":"58","hashOfConfig":"32"},{"size":7940,"mtime":1612459090966,"results":"59","hashOfConfig":"32"},{"size":1048,"mtime":1612299969961,"results":"60","hashOfConfig":"32"},{"size":2915,"mtime":1612472840046,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"1p0v3vd",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"64"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"64"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/james/Desktop/deckstars/client/src/index.js",[],["128","129"],"/home/james/Desktop/deckstars/client/src/App.js",[],"/home/james/Desktop/deckstars/client/src/components/SplashPage.js",[],"/home/james/Desktop/deckstars/client/src/services/auth.js",[],"/home/james/Desktop/deckstars/client/src/MainContext.js",[],"/home/james/Desktop/deckstars/client/src/theme/mui_theme.js",[],"/home/james/Desktop/deckstars/client/src/styles/navbarstyles.js",[],"/home/james/Desktop/deckstars/client/src/components/nav/NavBar.js",[],"/home/james/Desktop/deckstars/client/src/components/nav/NavLogin.js",[],"/home/james/Desktop/deckstars/client/src/components/nav/NavMenu.js",[],"/home/james/Desktop/deckstars/client/src/components/SignUpForm.js",[],"/home/james/Desktop/deckstars/client/src/components/HomePage.js",["130","131"],"/home/james/Desktop/deckstars/client/src/components/PrivateRoute.js",[],"/home/james/Desktop/deckstars/client/src/styles/homepagestyles.js",[],"/home/james/Desktop/deckstars/client/src/styles/signupformstyles.js",[],"/home/james/Desktop/deckstars/client/src/styles/navmenustyles.js",[],"/home/james/Desktop/deckstars/client/src/components/DeckDetails.js",["132"],"import React, { useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { MainContext } from \"../MainContext\";\n\nconst useStyles = makeStyles((theme) => ({\n  deck_details_container: {\n    color: \"white\",\n    padding: \"10px\",\n  },\n  deck_record: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n}));\n\nconst DeckDetails = () => {\n  const { currentDeck } = useContext(MainContext);\n\n  const styles = useStyles();\n\n  if (!currentDeck) {\n    return null;\n  }\n\n  return (\n    <Box className={styles.deck_details_container}>\n      <Typography variant=\"h4\">{currentDeck.name}</Typography>\n      <Typography variant=\"body2\">\n        Created By: {currentDeck.user.username}\n      </Typography>\n      <Typography variant=\"body2\">Format: {currentDeck.format}</Typography>\n      <Box className={styles.deck_record}>\n        <Typography variant=\"caption\">Wins: {currentDeck.wins}</Typography>\n        <Typography variant=\"caption\">Losses: {currentDeck.losses}</Typography>\n        <Typography variant=\"caption\">\n          Winrate:{\" \"}\n          {currentDeck.wins\n            ? currentDeck.wins / (currentDeck.wins + currentDeck.losses)\n            : 0}\n        </Typography>\n      </Box>\n      <Box>\n        <Typography variant=\"body1\">{currentDeck.description}</Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default DeckDetails;\n","/home/james/Desktop/deckstars/client/src/components/DeckInfo.js",["133"],"import React, { useContext } from \"react\";\nimport { Link, withRouter, useHistory } from \"react-router-dom\";\nimport { Box, Typography, IconButton } from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { makeStyles } from \"@material-ui/styles\";\n\nimport { MainContext } from \"../MainContext\";\n\nconst useStyles = makeStyles((theme) => ({\n  link: {\n    textDecoration: \"none\",\n    color: \"white\",\n  },\n  deckinfo_container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    backgroundColor: theme.palette.secondary.light,\n    height: \"80px\",\n    maxWidth: \"100%\",\n    marginBottom: \"5px\",\n    padding: \"10px\",\n  },\n  row_one: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    margin: \"5px\",\n  },\n  row_two: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    margin: \"5px\",\n  },\n}));\n\nconst DeckInfo = ({ deck, setDeleteOpen, setDeckToDelete }) => {\n  const { setCurrentDeck } = useContext(MainContext);\n  const styles = useStyles();\n  const handleClick = async (e) => {\n    let foundDeck = await fetch(`/api/decks/${deck.id}`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const parsedDeck = await foundDeck.json();\n    setCurrentDeck(parsedDeck);\n  };\n\n  const handleDelete = (e) => {\n    e.preventDefault();\n    setDeckToDelete(deck.id);\n    setDeleteOpen(true);\n  };\n\n  return (\n    <Link\n      to={`/decks/${deck.id}`}\n      key={deck.id}\n      className={styles.link}\n      onClick={(e) => handleClick(e)}\n    >\n      <Box className={styles.deckinfo_container}>\n        <Box className={styles.row_one}>\n          <Typography>{deck.name}</Typography>\n          <Typography>{deck.format}</Typography>\n        </Box>\n        <Box className={styles.row_two}>\n          <Typography variant=\"body2\">Wins: {deck.wins}</Typography>\n          <Typography variant=\"body2\">Losses: {deck.losses}</Typography>\n          <Typography variant=\"body2\">\n            Winrate: {deck.wins ? deck.wins / (deck.wins + deck.losses) : 0}\n          </Typography>\n        </Box>\n        <Box className={styles.delete_holder}>\n          <IconButton onClick={(e) => handleDelete(e)} size=\"small\">\n            <DeleteIcon color=\"primary\" fontSize=\"small\" id={deck.id} />\n          </IconButton>\n        </Box>\n      </Box>\n    </Link>\n  );\n};\n\nexport default withRouter(DeckInfo);\n","/home/james/Desktop/deckstars/client/src/components/homepage/HomePageLeft.js",[],"/home/james/Desktop/deckstars/client/src/components/homepage/DeckCards.js",[],"/home/james/Desktop/deckstars/client/src/components/MUI_custom/Custom_Accordion.js",[],"/home/james/Desktop/deckstars/client/src/components/homepage/CardBrowser.js",["134","135"],"/home/james/Desktop/deckstars/client/src/components/homepage/DeckForm.js",["136"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { Box, Button, Typography, TextField } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { MainContext } from \"../../MainContext\";\n\nimport deckformstyles from \"../../styles/deckformstyles\";\n\nimport {\n  handleRemoveCardMain,\n  handleAddCardMain,\n  handleRemoveCardSide,\n  handleAddCardSide,\n} from \"../../services/buttons\";\n\nconst useStyles = makeStyles((theme) => deckformstyles);\n\nconst DeckForm = () => {\n  const { newDeck, user, setCurrentDeck, setNewDeck, setUser } = useContext(\n    MainContext\n  );\n  const [redirectId, setRedirectId] = useState(null);\n  const styles = useStyles();\n\n  useEffect(() => {\n    setNewDeck({\n      name: \"\",\n      description: \"\",\n      mainDeck: [],\n      sideBoard: [],\n    });\n  }, [setNewDeck]);\n\n  const changeDeckName = (e) => {\n    e.preventDefault();\n    newDeck.name = e.target.value;\n    console.log(newDeck);\n    setNewDeck(newDeck);\n  };\n\n  const changeDeckDescription = (e) => {\n    e.preventDefault();\n    newDeck.description = e.target.value;\n    setNewDeck(newDeck);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let tempDeck = { ...newDeck };\n    for (let i = 0; i < tempDeck.mainDeck.length; i++) {\n      tempDeck.mainDeck[i].cardId = tempDeck.mainDeck[i].id;\n      delete tempDeck.mainDeck[i].name;\n      delete tempDeck.mainDeck[i].id;\n    }\n    for (let i = 0; i < tempDeck.sideBoard.length; i++) {\n      tempDeck.sideBoard[i].cardId = tempDeck.sideBoard[i].id;\n      delete tempDeck.sideBoard[i].name;\n      delete tempDeck.sideBoard[i].id;\n    }\n    let dataToPost = {\n      userId: user.id,\n      deck: {\n        name: tempDeck.name,\n        description: tempDeck.description,\n        mainDeck: tempDeck.mainDeck,\n        sideBoard: tempDeck.sideBoard,\n        format: \"standard\",\n      },\n    };\n    console.log(dataToPost);\n    let res = await fetch(\"/api/decks\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      credentials: \"include\",\n      body: JSON.stringify(dataToPost),\n    });\n    let parsed = await res.json();\n    console.log(parsed);\n    let tempUser = { ...user };\n    console.log(user);\n    tempUser.decks.push(parsed);\n    setUser(tempUser);\n    setRedirectId(parsed.id);\n  };\n\n  if (redirectId) {\n    return <Redirect to={`/decks/${redirectId}`} />;\n  }\n\n  return (\n    <Box className={styles.container}>\n      <form className={styles.deck_form} onSubmit={(e) => handleSubmit(e)}>\n        <TextField\n          required\n          className={styles.text_field}\n          placeholder=\"Deck Name\"\n          autoComplete=\"off\"\n          onChange={(e) => changeDeckName(e)}\n          multiline={true}\n          variant=\"outlined\"\n          fullWidth={true}\n        ></TextField>\n        <TextField\n          className={styles.text_field}\n          placeholder=\"Description\"\n          autoComplete=\"off\"\n          onChange={(e) => changeDeckDescription(e)}\n          multiline={true}\n          variant=\"outlined\"\n          fullWidth={true}\n        ></TextField>\n        <Box className={styles.deck_list_main}>\n          <Typography color=\"primary\">Main Deck</Typography>\n          <Box className={styles.header}>\n            <Typography>#</Typography>\n            <Typography>Card Name</Typography>\n          </Box>\n          <Box>\n            {newDeck.mainDeck.length > 0 &&\n              newDeck.mainDeck.map((card) => (\n                <Box key={card.id} className={styles.card_details}>\n                  <Typography variant=\"body2\" className={styles.card_quantity}>\n                    {card.quantity}\n                  </Typography>\n                  <Typography variant=\"body2\" className={styles.card_name}>\n                    {card.name}\n                  </Typography>\n                  <Box className={styles.interact_suite}>\n                    <button\n                      className={styles.interact_button}\n                      id={`${card.id}@${card.name}`}\n                      onClick={(e) =>\n                        handleRemoveCardMain(e, newDeck, setNewDeck)\n                      }\n                    >\n                      -1\n                    </button>\n                    <button\n                      className={styles.interact_button}\n                      id={`${card.id}@${card.name}`}\n                      onClick={(e) => handleAddCardMain(e, newDeck, setNewDeck)}\n                    >\n                      +1\n                    </button>\n                  </Box>\n                </Box>\n              ))}\n          </Box>\n        </Box>\n        <Box className={styles.deck_list_main}>\n          <Typography className={styles.sideboard_title} color=\"primary\">\n            Side Board\n          </Typography>\n          <Box className={styles.header}>\n            <Typography>#</Typography>\n            <Typography>Card Name</Typography>\n          </Box>\n          <Box>\n            {newDeck.sideBoard.length > 0 &&\n              newDeck.sideBoard.map((card) => (\n                <Box key={card.id} className={styles.card_details}>\n                  <Typography variant=\"body2\" className={styles.card_quantity}>\n                    {card.quantity}\n                  </Typography>\n                  <Typography variant=\"body2\" className={styles.card_name}>\n                    {card.name}\n                  </Typography>\n                  <Box className={styles.interact_suite}>\n                    <button\n                      className={styles.interact_button}\n                      id={`${card.id}@${card.name}`}\n                      onClick={(e) =>\n                        handleRemoveCardSide(e, newDeck, setNewDeck)\n                      }\n                    >\n                      -1\n                    </button>\n                    <button\n                      className={styles.interact_button}\n                      id={`${card.id}@${card.name}`}\n                      onClick={(e) => handleAddCardSide(e, newDeck, setNewDeck)}\n                    >\n                      +1\n                    </button>\n                  </Box>\n                </Box>\n              ))}\n          </Box>\n        </Box>\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Box>\n  );\n};\n\nexport default DeckForm;\n","/home/james/Desktop/deckstars/client/src/services/buttons.js",["137","138"],"import React, { useContext } from \"react\";\n\nexport const handleRemoveCardMain = (e, newDeck, f) => {\n  e.preventDefault();\n  let idName = e.target.id.split(\"@\");\n  let tempDeck = { ...newDeck };\n  tempDeck.mainDeck.forEach((card, i) => {\n    if (card.id === parseInt(idName[0])) {\n      card.quantity -= 1;\n    }\n  });\n  let newMainDeck = tempDeck.mainDeck.filter((card) => card.quantity > 0);\n  tempDeck.mainDeck = newMainDeck;\n  f(tempDeck);\n};\n\nexport const handleAddCardMain = (e, newDeck, f) => {\n  e.preventDefault();\n  let idName = e.target.id.split(\"@\");\n  const tempDeck = { ...newDeck };\n  let found = false;\n  tempDeck.mainDeck.forEach((card, i) => {\n    if (card.id === parseInt(idName[0])) {\n      card.quantity += 1;\n      found = true;\n    }\n  });\n  if (!found) {\n    tempDeck.mainDeck.push({\n      id: parseInt(idName[0]),\n      name: idName[1],\n      quantity: 1,\n    });\n  }\n  f(tempDeck);\n};\n\nexport const handleRemoveCardSide = (e, newDeck, f) => {\n  e.preventDefault();\n  let idName = e.target.id.split(\"@\");\n  let tempDeck = { ...newDeck };\n  tempDeck.sideBoard.forEach((card, i) => {\n    if (card.id === parseInt(idName[0])) {\n      card.quantity -= 1;\n    }\n  });\n  let newMainDeck = tempDeck.sideBoard.filter((card) => card.quantity > 0);\n  tempDeck.sideBoard = newMainDeck;\n  f(tempDeck);\n};\n\nexport const handleAddCardSide = (e, newDeck, f) => {\n  e.preventDefault();\n  let idName = e.target.id.split(\"@\");\n  const tempDeck = { ...newDeck };\n  let found = false;\n  tempDeck.sideBoard.forEach((card, i) => {\n    if (card.id === parseInt(idName[0])) {\n      card.quantity += 1;\n      found = true;\n    }\n  });\n  if (!found) {\n    tempDeck.sideBoard.push({\n      id: parseInt(idName[0]),\n      name: idName[1],\n      quantity: 1,\n    });\n  }\n  f(tempDeck);\n};\n","/home/james/Desktop/deckstars/client/src/styles/deckformstyles.js",[],"/home/james/Desktop/deckstars/client/src/styles/homepageleftstyles.js",[],"/home/james/Desktop/deckstars/client/src/styles/deckcardstyles.js",[],"/home/james/Desktop/deckstars/client/src/components/homepage/CardFilter.js",["139","140","141"],"import React, { useContext, useState, useEffect } from \"react\";\nimport { MainContext } from \"../../MainContext\";\nimport {\n  Box,\n  Typograhpy,\n  Typography,\n  FormControl,\n  FormGroup,\n  FormLabel,\n  FormControlLabel,\n  FormHelperText,\n  Checkbox,\n  TextField,\n  Button,\n} from \"@material-ui/core\";\nimport {\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n} from \"../MUI_custom/Filters_Custom_Accordion\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nimport { makeStyles } from \"@material-ui/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    height: \"100%\",\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"70%\",\n    height: \"100%\",\n    display: \"grid\",\n    gridTemplateColumns: \"6fr 1fr 8fr 1fr 2fr\",\n  },\n  search_container: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  text_field: {\n    backgroundColor: theme.palette.secondary.light,\n  },\n  filters_container: {\n    display: \"flex\",\n    alignItems: \"center\",\n    color: \"white\",\n  },\n  filters: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"56px\",\n    width: \"100%\",\n  },\n  accordion: {\n    height: \"100%\",\n    width: \"100%\",\n    zIndex: 3,\n    backgroundColor: theme.palette.secondary.light,\n    color: \"white\",\n    border: \"1px solid white\",\n  },\n  accordion_summary: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  expanded_details: {\n    backgroundColor: theme.palette.secondary.main,\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  card_type_filters: {\n    display: \"flex\",\n  },\n  submit_container: {\n    display: \"flex\",\n    height: \"100%\",\n    alignItems: \"center\",\n  },\n  button_submit: {\n    backgroundColor: theme.palette.primary.main,\n    height: \"50px\",\n    \"&:hover\": {\n      backgroundColor: theme.palette.primary.light,\n    },\n  },\n  types_container: {\n    display: \"grid\",\n    gridTemplateColumns: \"1fr 1fr 1fr 1fr 1fr\",\n  },\n  check_box_container: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  check_box: {\n    color: theme.palette.secondary.light,\n  },\n  colors_container: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    padding: \"0px 20px 0px 0px\",\n  },\n  mana_symbol: {\n    height: \"2rem\",\n    width: \"auto\",\n  },\n}));\n\nconst CardFilter = () => {\n  const { symbols, setFilters, setPage } = useContext(MainContext);\n  const [searchString, setSearchString] = useState(\"\");\n  const [cardTypes, setCardTypes] = useState([]);\n  const [checkedTypes, setCheckedTypes] = useState([]);\n  const [checkedColors, setCheckedColors] = useState([]);\n\n  const styles = useStyles();\n\n  const colors = [\n    { identifier: \"W\", symbol: \"{W}\" },\n    { identifier: \"U\", symbol: \"{U}\" },\n    { identifier: \"B\", symbol: \"{B}\" },\n    { identifier: \"R\", symbol: \"{R}\" },\n    { identifier: \"G\", symbol: \"{G}\" },\n    { identifier: \"C\", symbol: \"{C}\" },\n  ];\n\n  useEffect(() => {\n    (async () => {\n      const res = await fetch(\"/api/cardtypes\");\n      const parsed = await res.json();\n      setCardTypes(parsed);\n    })();\n  }, []);\n\n  const handleChange = (e) => {\n    e.preventDefault();\n    setSearchString(e.target.value);\n  };\n\n  const handleChangeTypeCheck = (e) => {\n    if (checkedTypes.includes(e.target.name)) {\n      setCheckedTypes([\n        ...checkedTypes.filter((name) => name !== e.target.name),\n      ]);\n    } else {\n      setCheckedTypes([...checkedTypes, e.target.name]);\n    }\n    console.log(checkedTypes);\n  };\n\n  const handleChangeColorCheck = (e) => {\n    if (checkedColors.includes(e.target.name)) {\n      setCheckedColors([\n        ...checkedColors.filter((name) => name !== e.target.name),\n      ]);\n    } else {\n      setCheckedColors([...checkedColors, e.target.name]);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setPage(0);\n    const queryObj = {\n      name: \"\",\n      colors: [],\n      cardTypes: [],\n    };\n\n    if (searchString) {\n      queryObj[\"name\"] = searchString;\n    }\n\n    if (checkedColors.length > 0) {\n      queryObj[\"colors\"] = checkedColors;\n    }\n\n    if (checkedTypes.length > 0) {\n      queryObj[\"cardTypes\"] = checkedTypes;\n    }\n    setFilters(queryObj);\n\n    // const res = await fetch(`/api/cards/search/results${queryString}`);\n    // // const parsed = await res.json();\n    // // setCards(parsed);\n    // let parsed = await res.json();\n    // setCards(parsed);\n  };\n\n  return (\n    <Box className={styles.container}>\n      <form className={styles.form} onSubmit={(e) => handleSubmit(e)}>\n        <Box className={styles.search_container}>\n          <TextField\n            className={styles.text_field}\n            variant=\"outlined\"\n            placeholder=\"Search for a card\"\n            onChange={(e) => handleChange(e)}\n            fullWidth={true}\n          ></TextField>\n        </Box>\n        <Box></Box>\n        <Box className={styles.filters_container}>\n          <Box className={styles.filters}>\n            <Accordion square={true} className={styles.accordion}>\n              <AccordionSummary\n                expandIcon={<ExpandMoreIcon color=\"primary\" />}\n                aria-controls=\"expand filters\"\n                className={styles.accordion_summary}\n              >\n                <Typography>Filters</Typography>\n              </AccordionSummary>\n              <AccordionDetails className={styles.expanded_details}>\n                <FormControl\n                  component=\"fieldset\"\n                  className={styles.card_type_filters}\n                >\n                  <FormLabel component=\"Legend\">Card Types</FormLabel>\n                  <FormGroup row={true} className={styles.types_container}>\n                    {cardTypes.map((type, i) => {\n                      return (\n                        <Box className={styles.check_box_container} key={i}>\n                          <Checkbox\n                            color=\"primary\"\n                            checked={checkedTypes.includes(type.name)}\n                            onChange={handleChangeTypeCheck}\n                            name={type.name}\n                            className={styles.check_box}\n                          />\n                          <Typography variant=\"caption\">{type.name}</Typography>\n                        </Box>\n                      );\n                    })}\n                  </FormGroup>\n                </FormControl>\n                <FormControl\n                  component=\"fieldset\"\n                  className={styles.color_filters}\n                >\n                  <FormLabel component=\"Legend\">Colors</FormLabel>\n                  <FormGroup row={true} className={styles.colors_container}>\n                    {colors.map((color, i) => {\n                      return (\n                        <Box className={styles.check_box_container} key={i}>\n                          <Checkbox\n                            color=\"primary\"\n                            checked={checkedColors.includes(color.identifier)}\n                            onChange={handleChangeColorCheck}\n                            name={color.identifier}\n                            className={styles.check_box}\n                          />\n                          <img\n                            alt={`${color.identifier} mana symbol`}\n                            src={symbols[color.symbol]}\n                            className={styles.mana_symbol}\n                          ></img>\n                        </Box>\n                      );\n                    })}\n                  </FormGroup>\n                </FormControl>\n              </AccordionDetails>\n            </Accordion>\n          </Box>\n        </Box>\n        <Box></Box>\n        <Box className={styles.submit_container}>\n          <Button className={styles.button_submit} type=\"submit\">\n            Search\n          </Button>\n        </Box>\n      </form>\n    </Box>\n  );\n};\n\nexport default CardFilter;\n","/home/james/Desktop/deckstars/client/src/components/MUI_custom/Filters_Custom_Accordion.js",[],"/home/james/Desktop/deckstars/client/src/styles/cardbrowserstyles.js",[],{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":2,"column":18,"nodeType":"148","messageId":"149","endLine":2,"endColumn":29},{"ruleId":"146","severity":1,"message":"150","line":2,"column":31,"nodeType":"148","messageId":"149","endLine":2,"endColumn":40},{"ruleId":"146","severity":1,"message":"150","line":2,"column":10,"nodeType":"148","messageId":"149","endLine":2,"endColumn":19},{"ruleId":"146","severity":1,"message":"151","line":2,"column":28,"nodeType":"148","messageId":"149","endLine":2,"endColumn":38},{"ruleId":"152","severity":1,"message":"153","line":206,"column":13,"nodeType":"154","messageId":"155","endLine":208,"endColumn":14},{"ruleId":"156","severity":1,"message":"157","line":206,"column":13,"nodeType":"154","messageId":"158","endLine":208,"endColumn":14},{"ruleId":"146","severity":1,"message":"159","line":19,"column":26,"nodeType":"148","messageId":"149","endLine":19,"endColumn":40},{"ruleId":"146","severity":1,"message":"160","line":1,"column":8,"nodeType":"148","messageId":"149","endLine":1,"endColumn":13},{"ruleId":"146","severity":1,"message":"161","line":1,"column":17,"nodeType":"148","messageId":"149","endLine":1,"endColumn":27},{"ruleId":"146","severity":1,"message":"162","line":5,"column":3,"nodeType":"148","messageId":"149","endLine":5,"endColumn":13},{"ruleId":"146","severity":1,"message":"163","line":10,"column":3,"nodeType":"148","messageId":"149","endLine":10,"endColumn":19},{"ruleId":"146","severity":1,"message":"164","line":11,"column":3,"nodeType":"148","messageId":"149","endLine":11,"endColumn":17},"no-native-reassign",["165"],"no-negated-in-lhs",["166"],"no-unused-vars","'useLocation' is defined but never used.","Identifier","unusedVar","'useParams' is defined but never used.","'useHistory' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unreachable","Unreachable code.","unreachableCode","'setCurrentDeck' is assigned a value but never used.","'React' is defined but never used.","'useContext' is defined but never used.","'Typograhpy' is defined but never used.","'FormControlLabel' is defined but never used.","'FormHelperText' is defined but never used.","no-global-assign","no-unsafe-negation"]